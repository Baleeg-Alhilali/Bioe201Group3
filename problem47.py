{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "98a1ed5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18594\n",
      "\n",
      "STGNWMKYVWENS--KPDDDENYHHTTIQTEFRFVEYSTQPQPDHMGDFNFIYY-ILHPAHHYHDQISPIEMPRNTEMTDYEAEVYRKP--HID-FK-P-DRV----VDHTE--CE-AWSQQMKSTYAVVKTWCN-QWNVHISHAEVNCKV-SWHVYINMMHYRMEYDTKDHYPGEHSWDPIFELYLFYVTSDYWPALGCSGCMESCAHGSHSGHIKRVRGAFLGRFMQ-HVSRDRFIYQPWLYSNDPGKQFFGDITKLHAQRYAVPH-IHGQCSCHLPAWQCMEWWWENSDGSKWHECPETYHIEWALEIRWAWWWTPASIDAHVYCFGKKTMNCPDVTWFKKH---YEPPWV-DENLMAHEPFINCQDEAIE-P-YA-EAAEDWQCDLVSCVFLQHTQPRCYDVKQVTIIEQMY-KQFKTE-IHMDDKYHNTVMS---------TRCNPEDTEYCSGCVKVVWPFWQRDDAGPIQARPDHYMMWHQVP--ISVAAILKVIEINYLQ-VTYNVGMWEQTHVVESYRNQGVTERMMYGWLYKEWFSAFEVNV---TFDTPFWIVMYDARLWDYQAVKVMSGIYSTG-VWYKRIGRSQQNQDLLIVVRNFGGVPNKSGVMHLAAACPVQNCCPYGNTLKARDLQEADGAGFHGGQIMVFELDTIHAYTYRKVFAPLKMQQPGNCSLWLISGYQLRFYQNLLHKGQATITFKHPTMTYWVNWPENAWPHVGVWKKVMVDTPPGFKVLGQIIHQSNGIEQYMECCSCSHALP---QDDHDTWFAQRIHVEVC--HCCKLPMYRILNYFDKSHTEWMGLGRLWIDIIDPYDCQNWMRYLRYESEFNDYFTRSRYKRRIAFYSLFEEWPMNTHMKGSKF---FEMLDWMCQGWRNSQHAESYTRMWPPTWYGRH-TKNDYVMDMMFEQKEHFAMK-E-KGGW--NAAYMDRPPFHPTEQLQQPKLATGWKMWWINRPRQPYEGVERRPYCDSYTYRYVDQGQGHIEKNSPFMEYMWTAAMDNAASKMPWVNHWWFAAATCPHFFETAFHVDFWVMW-LGYLFTCQTHAQ-FNQDS-CS-EC--E-VGCV-V-EHDIGR--NYYYLD-W--E-----QWID-------L--K-D--KVL---LQHYRQANIRRTSGMYITNIQEWCMSDFMFP-------QKSTKDWMDRMVQRNISWDEPMYSHWKICLEDDREAPFDGLHQSWLDGICGIHECYIYWPQYKMDF-HFVPSF-VRGC-GAPRLMFVFDWTIAGDGFILR-K-----I-GY--M-EARFGVVMPYTDWKHYDPPRKWFTLEFV--HP-W-DYVQRNDMLFVMAQLSGFYKCMDRYGTSMPTQWRWDVSDETFNC-YKSHRVQ-HSLNFSKQMSPCGVWTPWTRDCWDEQPHGCEPMLNWYMNFELKDSQGRAEPNELNANAHQNTNHMHFIPYYDVTEVWPFKTSHHDMQQNDMWWSKRMAPVQKGVTVLVVEVDFPMLKFQAKNPIMTYIMIEVECCAHTSPHVDWSKNRARLGDRQKFDLG-T--------KIITCK-H---KRICVNIPYYP--------GAVIYYSFCR-QMCFESC-FYWFNLRYSQFANVRCITVNLAFDLHF-KMNL--H-M-------EHFTSFICYHRRIMLKC--IQRYIEIT-GV-K--QC-C--WPP-MCKC--LVWS-YPS-SFGVLTEYAYVVARVVYGETTAFMHPTNLDFIRHCFVMKECSKSLPEDCSTPHENNAWHITTMWSIYQLPADIYVIKMFVKHCADMFKHNLPKPVESGTTDFFVYVLKTTQHPAFVGAW-CRI--CQSLRDEHHPFENWEQGHKMVVYYFVPDTDGQQVMTAIYPEFTASVTFKHAAWWFLWKTKKVELEWIYLIDFTFESCMRNHDGYENEHVI--RDGC-I-GRP-YPIAHYMVDQDPFEAEIPLYYVFSTRFMNYQFVSVGMLMFPYPDVWAHPRLTVTKIIEASTGLYEFSCYKEGRNLRCLSVV-----HVGHIANRVVTQFVKHHKDVTREYVADKGHSVYTNRPGHDQEHMYTCPEAVDGTSTVYKTSDKWWCDQPMPKCHIWCERSIAQFDDENPSEKQMKTSRQVRPW-PGPMMQNFPKPQMRHMYQSVIKKESPQVCILLVGTDVNSRAQLMNIAQFHDHKACPFQCAARNDFHRQP-YMVFQYLMQVKYEWRP-NFRFWGARKDQRKDIYPWACVFDQGFG-FGASFCFDDKAVAEIWYMALQYADSYEE-YDELHIWFFQYFGDEDDLKPIALAC-DCGDVIN-IVFENRFTLCQKPEKTATQQHAFSTPWEFLSYYWK-WHSNSQVTNARNFSPHKQWLFFTYQHKILDPSWASIIELCGAPAQKFCVDMFVHKEKNDTYWEKGWHHPPSMPRISVME-PWTKKQPPRKSIWNDAIVNKIAEIMVSTICFFQINDHYMTWNAKTQKRFHF-K-IPIKAYMMMMKAFLISKLQINQADMQYMTSNWECTHTIYDCIFPIYNTELDIRNHIRYGSEAQKKHVACQVLKSNCTVFVKYGCIGGNNKLGQK-K-HPLKIHGF-A-MHQ----VLHENR--GNPYMADCAHNIKIIKDSRVMCLVHWTTSTQWYNYINQAKWNHPWQLKVCGHAKYEGACPQVWKMGRIHLTSMMAPPDARQVIGHYDVAVDTDFAEVNYGFDHHINHYYWSERWDELNTMIRQLSVCRIIMMEC-C---M-IL-APGIKYLQNQIWTRQPKEKMLFCEMYWWGCVAMEYCPTTLPGNRNPNSQAGPCWEWRRTYVPLGTQHFLDFIWHQPWLLAETCTYHTV-----TLHCMACWRSVAT--YYIAPPG--TVIGPCCQEDLDEYIPDVHNYEPPTEPQGCQRKMMCGTPRTQEACIKMIMIRYVNPCTFRTTQCQNIDRHCTRQCFWQLTLYWMELSAEPFRMYTADDVVSRRAHHCHFFTRQQPIHFTCHS---SAILKIDAADYMCWMADYWQRDRYVRFNMRLMHPHCRNCSTQGEERRSGMNTTKLFKNMICLTSCTAGKHWHFVQYKLGNMHKHPPMPILHTWQVYHFKLTHLVWGDFLNDF-DWTKVFA-NWCNSPQWWVFPCFDQESMIAPPLFSHLHYFRCHCLIMKYGQTHCAPL-IWMINPDGFMGPEGDGRMAPCRMVQYGCHKPLTFEWFGRQMISVWANAHSYFKHQCPRMGYIIQVTTSISLKIHFF-MALFQWTAPERPPVCDEVVFPKRHGWNGWGNVSYNYSSVKMFTIHCVTDKVQSEYEQVDACLPSCHYTGTVYFICIDNLQFSLNNLRVSWHPAVMEDDILEIKLACGQMLLDGQRVMYIATNKLNLYQWQMRSV---TWGCWFYSSTICY---HTP-AMGS-------G-IRDPQALCITENFLTLMITFNENIKTGLTNDMTVYIREIDETYWCEYLSLLTGDWWITQEFGINHVPITLRTRDQPFT--DPCIGDGVCLNVAVTWGRDIKIQHCHRSYWTIRSHEYQEVEFRPWCWTRWSKTTPAY--H--PDKFYQYS--L---RF---F--WAHAPRFGAINGYDLLLPNIPLNGTRNDGYYDQFFDHHAL----GG-----------DCPLPVIWLWSDNCTGTSEIGPV-Q--GC-I-AKGPTPVFDQWFQHKYWSTLKTHNYEHREKRVTDPLYQSLSLDLRFERHTRAPHKFVCYYRQRMLQI--E-KG--ALPAVCLWGKVWDCKPQHNEMQSPEADMH------FQYLMGANQKNYSVRCSSSKDQCQYWFSTQPDWSGIKYYFTRW-FLEMV--N-L-SIAKTKASNQN--MEKN-IKIR-TKLPYENCHFTARKFIGCEPVCKKNRLLFGGKDKMTCFANPACFHVMQKREHV-------FCPPP-QTD--WKGLGYVYKRGDPCYFNMFDWNDNDTFCQFKMATLHTDWIYSWTMQNCCIREYDMVDNCILEGVPIFACNQKEFMKNENEGKWMDIVRVTYCEMDDHMYMRMVIRPDLH-TQWEKKPHIDRKNKRMDYHECQLCKKPFLG-S-QL-IQEHFCACGPWHFLKTFDDQFIEL--H---V-Y-------A-QAY---------HVKPLMVSEKSPSAGNECHRYLFMFSSMTQRCTDDSIQGLNWDVMCHFKKPIWH--DPFPYSRTIWGRHYKAVKGKNGFLRFYKMFESHGRGHLKSWIVKHKMIWRIYENGTCEYTQRLLNMDGPLDTWWIDRVQRLRTPPIWHQKNHMNMFVPHLTCWDRKEWPGLYFDDWVVMWRCLERADHYGYTEMFHLQMMFASQYRDKSFCWQLQTIQWFQLAYC--GPNMNMPAWTPVDLRRMPLYWN-Q-LDVV--I--FWGQT-CDYVPAYK--RII-VC--LPRYMQTRHPAIFEFARDTR-C-MMRDLWLPNVQGGN-----YW---L-WMQQGDQCNGQGVEGAMEYRE--DNYAMCAEQPVPEEEHRYEDSHPTYRCPWVHNDENFPWEFKRCLTFYHLVYVDT-C-PMGYMWGRERNKPLWMCPKQMYDPWLIYCLELDDNADCKVQFNGVGQGDELFN-LWRYLPDNQPPPWHYVFLYVSWPPYFSTDYVFCDKSVSQTDAPMLTLAYIMKFNWAAFPLWGKQPYQQ-S-MDASM-EIMVEVLQHFEHWCELSVM-W-LPT--W--GMSM--QCWNPWSYGSEHMCF-RGAEALVWQWLWLMGMVIKRDYSSQTQHAE-DECTSGPKYFLQLLRCRK--IGW--HEENTYWTFFFHYVDEFSLRYEMSHWTINSIMELDEVWCFWHMWAANIMMCVGRLNRFNFIDLLAV--------AGAVVPDMDYLIQLRYETAFTSLMAINACVKINSACD--EACSPKFRIFTASCCDSGFDADMFTHEVSDVWEQYPNFEEDGDAFMFRHDAICATELTTSLEKGQRFMHYMMPVEF--HSQVT-TS-R-KHDFPMAHFCFPIMWTGPTTYLEHGIQLDPL---VIQW-VYY-K-HYVTPPDYDHNCPDWQWWMIYPWYSINGFKHDLPTSL--NLK-MEFKQWVCPRDRDNRFVGCDLRVK-DNDTEVAIQQ-CIKFTDNGIEVYSACQNRRAYADQDDYTAYKHRAEIFDLYRAMNDET---WANPLLFSPPDQAALKMVRWLTLKHQYPSDYWVTGCARRTTTNAQSWDRP-MEM-G--CDL-RDNRGPHLFIRKRKMHPYKIVGLIMCWMDTMTNAWIAFCTFI-HRKDAENDLDNSIPPKRVGVTQFCLYMYKRKTILNMTTFLSLCRNDPDKEFRRFPLNMHNIADGKLPGLILLAFKEDTTPPQSSDMHWTESKEWKHNRKYVTWQNLAHGDVKQHIIHSGNTNCQDKPALIMLAYPIFYPEY-L-PFN-Q-S-L-YIAQHNPN-KET-AVM-FK--HKVKDD-I-YSTPT-SKDTE-FWHNKDS-WGNWNQISCRDLVHRTLESWNSHTINNSMTSLEMWHWMASWCLDNTQIIKINYDARDGR-DLLTWYEYNSFCTLYMISYHKGSYVRLARD-PEVAGQNILFTTLSIWWQTDNLLM-F--VHGNGEEF-GNTHGKWELPNMPNRVWCSAVQKESAEN-WTSRYQVGIQQ--YPTALEMREPLMQGYCMLKHWDYSLSHHWCAAER--WHDSFLF-T-F-T--DN-PR-RHNGE-TEKPADRFCSCQQVVSWCLDCVVCHLGEDMDFIPPNHCRIQ--HEAWCFKQVPANFCEMVMQNSHMLMINRIYSDC-YDCLHMRLTDRHEYPERKY---QKWLIYDTMHWRNHIKWHGEDFHYQELNNEFKVVTSSNEWLFF-I-S-N-CKGQEDFMPMGHLPRILF---RMFEPGSKFSHSSYRIRAESWAQAQFGG-CRLQWPRRVL-T-MMRQWQGICILADSERDFKYTKGEDNMNHCN-YDIHFLRYRMLIERSCHGREMGWLWQ-GL-HP--R--W--S-P--Y-V-MGTAKEAK-YAHHPYWERAN-K-N----AIQERHFCCLTAWMSKSTIDIFKRERVYKRKTVADVNHMLWTNMTVMTHWSETMWVKPADEANSPPCVWPDSWEPCGVWLHKFQWHYVFPGYEARHRHDKFRDYVIHCFDYGDS--------TDIIQTIEMLFDRDQWRRVKLA----GRA--K--ELTHPTSWAM-DELTPTQAGHKNEPVCNEQQGQSLGSKMCRMSGNDCNLRACANGFLHHY------GDMFWSDFTKVC------HMPTTNQYDKVDHSMMTKTLLQQKCTLHWMGVWECIL--CHPKGV-NQY---GV-IASYLEQGNYHTMRT-----GCVQMVKARPQYQYHEDIHGGFIQEQTMSQLGGAMERPTKAACWHRGHQCEMSHHPWMVQTMYG-WERQMGNER-LP-AH--VPK--QPPSIDRMYVVKHLTNCDDTFVKDMW--VYREGHDTVTDMRSPNKFKMNAMFGD---RRGSV--IC--QDVVFFPKI-RY-V---YAGATLSE-RGL-DVHCGVDAA--------VRMGAAHDD-LGENIKRTGYKSSVPE--KTNTNCMCYTVDDELIFIYNWPPKNSCATKVEAMFIPMSLDVAYLIQMWMMDLIGGIKNTVSAVSNIIWIFTQHWKFYSSTGTTQIALITTNHCLETPQYFLSNLYKMIKVERPNNGFCAYVVIADQGELHSVCMPDIESTNKCTIWMLQISKWQPLAQWGTVTYFNSLDKFHLMPSYETFVMYGYALLFPWCAVYSQMNTFPLMMPDHQMYPSRGLPLMWTSVAMGNSPMGFIRRDGGIRAQYPWDWAWEEDD------GSWWTIVKCCCDTLGIMCKFYKLWDQT-NNRQAWTKCPDVDHERGTIWEWKQCPSS-NTQDWQA--KSQGQQMCDYRMISCIIIFSTSNWDPDHSETCDHMCD--------KFGYEGDKFQHMYSTNTMMMEYNY-VQT-FPWMCFLHITRYAKTTGPWSNMQDEEMGLKESEFWNKCYKMSEIIIDAWPPENTLS---DV-----YQAHNTRASAQEIMISDSIVEKKSIFRDCRTDLSYGMTCRPGKSYPYYNTGTCRSVAMRYSEETFWWSYAYDPWIMNLQYSLILHNWWYSNSEPGIICKPYTGKTEPMFD--H-G-VHYCARHVGSGQWAITTFCFSWCCDWTQPIAIYNNQVKFQAVNCCRSYKNQWQKKVYWTDFVCRGMSICPAQYPYERGCDEPKAAAPYPSVMCGGMWSFRELG--D---P-DNWVGNFEYCHYWERIHYT--------MNYFGSSHT--------K-CRNLLPLDRARVRRKVNGEYPNPNDEALTPGYVPCDNSNYC-MGQEWEVWFAMGLLNDEWWPTDMAVR----GCMAKLCQSTMHPRREMMGVEKTHKQRMPSVSQ-HKPMMNCGCPTKAH-QHEVPIILG-YRRTSELQRHGKAPWDAMDDTWDEFHCTDK----YNVCVMGMPPMQFIMRTCKYHNYHEWENSKQWQRWPYRHPPYHFFTHHQWWIPTLSPQDRQEQAKFLTTDSCCVNWQKPIEHYYVNWIQDYAEVHYMPRGEYSYMLINITFNKMFEHMSDCLKLQADQRALEDSDPM-RLSICLTEISATFKFHCNNACPVHHQIEMAMLTIMQIKDAKWQPFSAHKFAYWHVKYMMRIHRIVQHCWIIHHHRVRCTESVSCINHSQNEVMVWTPPEHAP--NCLIANLTWRNECMMKYWQKFEQVTGRETMIRTKGQACQSPCYTPVT-E---IR-LAFIN-YYFRCELCDIPTYMYHDHNFRMWYSGIVSCSHKEGYTQMVLMLQVRMSEGMQHPSWMC-H-EQTTMCQPQM--Y-LCLKSCVHGEFFW------W--R-YRCINADQTGQICGCECAF----R----R-WENKI-KENDLYFCHGGFISDVIVDCLDH-NAIKYTEWISVRHWH-LP-MAQSRGVLIHPKYEYQCSANFDMNQDVINDRVVMYHMFLIIFEMSLERYCGIVCVEYPKP----G--DTWILINVVPSTCVSCWWDLRLIWHPDKGNSDVHEWKWDGRYAVIFRYGDHSKKSYQPLFPWCLWTNQR--E-LAS-FPIFNTHLRAKIKEDGDHYYRTEYAGNEQVLEMYMEFWL-----P--P-WQTEPAIEQYK\n"
     ]
    }
   ],
   "source": [
    "BLOSUM62 = {\n",
    "    \n",
    "    ('A', 'A'): 4, ('A', 'R'): -1, ('A', 'N'): -2, ('A', 'D'): -2, ('A', 'C'): 0,\n",
    "    ('A', 'Q'): -1, ('A', 'E'): -1, ('A', 'G'): 0, ('A', 'H'): -2, ('A', 'I'): -1,\n",
    "    ('A', 'L'): -1, ('A', 'K'): -1, ('A', 'M'): -1, ('A', 'F'): -2, ('A', 'P'): -1,\n",
    "    ('A', 'S'): 1, ('A', 'T'): 0, ('A', 'W'): -3, ('A', 'Y'): -2, ('A', 'V'): 0,\n",
    "    ('R', 'A'): -1, ('R', 'R'): 5, ('R', 'N'): 0, ('R', 'D'): -2, ('R', 'C'): -3,\n",
    "    ('R', 'Q'): 1, ('R', 'E'): 0, ('R', 'G'): -2, ('R', 'H'): 0, ('R', 'I'): -3,\n",
    "    ('R', 'L'): -2, ('R', 'K'): 2, ('R', 'M'): 0, ('R', 'F'): -3, ('R', 'P'): -2,\n",
    "    ('R', 'S'): -1, ('R', 'T'): -1, ('R', 'W'): -3, ('R', 'Y'): -2, ('R', 'V'): -3,\n",
    "    ('N', 'A'): -2, ('N', 'R'): 0, ('N', 'N'): 6, ('N', 'D'): 1, ('N', 'C'): -3,\n",
    "    ('N', 'Q'): 0, ('N', 'E'): 0, ('N', 'G'): 0, ('N', 'H'): 1, ('N', 'I'): -3,\n",
    "    ('N', 'L'): -3, ('N', 'K'): 0, ('N', 'M'): -2, ('N', 'F'): -3, ('N', 'P'): -2,\n",
    "    ('N', 'S'): 1, ('N', 'T'): 0, ('N', 'W'): -4, ('N', 'Y'): -2, ('N', 'V'): -3,\n",
    "    ('D', 'A'): -2, ('D', 'R'): -2, ('D', 'N'): 1, ('D', 'D'): 6, ('D', 'C'): -3,\n",
    "    ('D', 'Q'): 0, ('D', 'E'): 2, ('D', 'G'): -1, ('D', 'H'): -1, ('D', 'I'): -3,\n",
    "    ('D', 'L'): -4, ('D', 'K'): -1, ('D', 'M'): -3, ('D', 'F'): -3, ('D', 'P'): -1,\n",
    "    ('D', 'S'): 0, ('D', 'T'): -1, ('D', 'W'): -4, ('D', 'Y'): -3, ('D', 'V'): -3,\n",
    "    ('C', 'A'): 0, ('C', 'R'): -3, ('C', 'N'): -3, ('C', 'D'): -3, ('C', 'C'): 9,\n",
    "    ('C', 'Q'): -3, ('C', 'E'): -4, ('C', 'G'): -3, ('C', 'H'): -3, ('C', 'I'): -1,\n",
    "    ('C', 'L'): -1, ('C', 'K'): -3, ('C', 'M'): -1, ('C', 'F'): -2, ('C', 'P'): -3,\n",
    "    ('C', 'S'): -1, ('C', 'T'): -1, ('C', 'W'): -2, ('C', 'Y'): -2, ('C', 'V'): -1,\n",
    "    ('Q', 'A'): -1, ('Q', 'R'): 1, ('Q', 'N'): 0, ('Q', 'D'): 0, ('Q', 'C'): -3,\n",
    "    ('Q', 'Q'): 5, ('Q', 'E'): 2, ('Q', 'G'): -2, ('Q', 'H'): 0, ('Q', 'I'): -3,\n",
    "    ('Q', 'L'): -2, ('Q', 'K'): 1, ('Q', 'M'): 0, ('Q', 'F'): -3, ('Q', 'P'): -1,\n",
    "    ('Q', 'S'): 0, ('Q', 'T'): -1, ('Q', 'W'): -2, ('Q', 'Y'): -1, ('Q', 'V'): -2,\n",
    "    ('E', 'A'): -1, ('E', 'R'): 0, ('E', 'N'): 0, ('E', 'D'): 2, ('E', 'C'): -4,\n",
    "    ('E', 'Q'): 2, ('E', 'E'): 5, ('E', 'G'): -2, ('E', 'H'): 0, ('E', 'I'): -3,\n",
    "    ('E', 'L'): -3, ('E', 'K'): 1, ('E', 'M'): 2, ('E', 'F'): -3, ('E', 'P'): -1,\n",
    "    ('E', 'S'): 0, ('E', 'T'): -1, ('E', 'W'): -3, ('E', 'Y'): -2, ('E', 'V'): -2,\n",
    "    ('G', 'A'): 0, ('G', 'R'): -2, ('G', 'N'): 0, ('G', 'D'): -1, ('G', 'C'): -3,\n",
    "    ('G', 'Q'): -2, ('G', 'E'): -2, ('G', 'G'): 6, ('G', 'H'): -2, ('G', 'I'): -4,\n",
    "    ('G', 'L'): -4, ('G', 'K'): -2, ('G', 'M'): -3, ('G', 'F'): -3, ('G', 'P'): -2,\n",
    "    ('G', 'S'): 0, ('G', 'T'): -2, ('G', 'W'): -2, ('G', 'Y'): -3, ('G', 'V'): -3,\n",
    "    ('H', 'A'): -2, ('H', 'R'): 0, ('H', 'N'): 1, ('H', 'D'): -1, ('H', 'C'): -3,\n",
    "    ('H', 'Q'): 0, ('H', 'E'): 0, ('H', 'G'): -2, ('H', 'H'): 8, ('H', 'I'): -3,\n",
    "    ('H', 'L'): -3, ('H', 'K'): -1, ('H', 'M'): -2, ('H', 'F'): -1, ('H', 'P'): -2,\n",
    "    ('H', 'S'): -1, ('H', 'T'): -2, ('H', 'W'): -2, ('H', 'Y'): 2, ('H', 'V'): -3,\n",
    "    ('I', 'A'): -1, ('I', 'R'): -3, ('I', 'N'): -3, ('I', 'D'): -3, ('I', 'C'): -1,\n",
    "    ('I', 'Q'): -3, ('I', 'E'): -3, ('I', 'G'): -4, ('I', 'H'): -3, ('I', 'I'): 4,\n",
    "    ('I', 'L'): 2, ('I', 'K'): -3, ('I', 'M'): 1, ('I', 'F'): 0, ('I', 'P'): -3,\n",
    "    ('I', 'S'): -2, ('I', 'T'): -1, ('I', 'W'): -3, ('I', 'Y'): -1, ('I', 'V'): 3,\n",
    "    ('L', 'A'): -1, ('L', 'R'): -2, ('L', 'N'): -3, ('L', 'D'): -4, ('L', 'C'): -1,\n",
    "    ('L', 'Q'): -2, ('L', 'E'): -3, ('L', 'G'): -4, ('L', 'H'): -3, ('L', 'I'): 2,\n",
    "    ('L', 'L'): 4, ('L', 'K'): -2, ('L', 'M'): 2, ('L', 'F'): 0, ('L', 'P'): -3,\n",
    "    ('L', 'S'): -2, ('L', 'T'): -1, ('L', 'W'): -2, ('L', 'Y'): -1, ('L', 'V'): 1,\n",
    "    ('K', 'A'): -1, ('K', 'R'): 2, ('K', 'N'): 0, ('K', 'D'): -1, ('K', 'C'): -3,\n",
    "    ('K', 'Q'): 1, ('K', 'E'): 1, ('K', 'G'): -2, ('K', 'H'): -1, ('K', 'I'): -3,\n",
    "    ('K', 'L'): -2, ('K', 'K'): 5, ('K', 'M'): 0, ('K', 'F'): -3, ('K', 'P'): -1,\n",
    "    ('K', 'S'): 0, ('K', 'T'): -1, ('K', 'W'): -3, ('K', 'Y'): -2, ('K', 'V'): -2,\n",
    "    ('M', 'A'): -1, ('M', 'R'): 0, ('M', 'N'): -2, ('M', 'D'): -3, ('M', 'C'): -1,\n",
    "    ('M', 'Q'): 0, ('M', 'E'): 2, ('M', 'G'): -3, ('M', 'H'): -2, ('M', 'I'): 1,\n",
    "    ('M', 'L'): 2, ('M', 'K'): 0, ('M', 'M'): 6, ('M', 'F'): 0, ('M', 'P'): -2,\n",
    "    ('M', 'S'): -2, ('M', 'T'): -1, ('M', 'W'): -1, ('M', 'Y'): -1, ('M', 'V'): 1,\n",
    "    ('F', 'A'): -2, ('F', 'R'): -3, ('F', 'N'): -3, ('F', 'D'): -3, ('F', 'C'): -2,\n",
    "    ('F', 'Q'): -3, ('F', 'E'): -3, ('F', 'G'): -3, ('F', 'H'): -1, ('F', 'I'): 0,\n",
    "    ('F', 'L'): 0, ('F', 'K'): -3, ('F', 'M'): 0, ('F', 'F'): 6, ('F', 'P'): -4,\n",
    "    ('F', 'S'): -2, ('F', 'T'): -2, ('F', 'W'): 1, ('F', 'Y'): 3, ('F', 'V'): -1,\n",
    "    ('P', 'A'): -1, ('P', 'R'): -2, ('P', 'N'): -2, ('P', 'D'): -1, ('P', 'C'): -3,\n",
    "    ('P', 'Q'): -1, ('P', 'E'): -1, ('P', 'G'): -2, ('P', 'H'): -2, ('P', 'I'): -3,\n",
    "    ('P', 'L'): -3, ('P', 'K'): -1, ('P', 'M'): -2, ('P', 'F'): -4, ('P', 'P'): 7,\n",
    "    ('P', 'S'): -1, ('P', 'T'): -1, ('P', 'W'): -4, ('P', 'Y'): -3, ('P', 'V'): -2,\n",
    "    ('S', 'A'): 1, ('S', 'R'): -1, ('S', 'N'): 1, ('S', 'D'): 0, ('S', 'C'): -1,\n",
    "    ('S', 'Q'): 0, ('S', 'E'): 0, ('S', 'G'): 0, ('S', 'H'): -1, ('S', 'I'): -2,\n",
    "    ('S', 'L'): -2, ('S', 'K'): 0, ('S', 'M'): -2, ('S', 'F'): -2, ('S', 'P'): -1,\n",
    "    ('S', 'S'): 4, ('S', 'T'): 1, ('S', 'W'): -3, ('S', 'Y'): -2, ('S', 'V'): -2,\n",
    "    ('T', 'A'): 0, ('T', 'R'): -1, ('T', 'N'): 0, ('T', 'D'): -1, ('T', 'C'): -1,\n",
    "    ('T', 'Q'): -1, ('T', 'E'): -1, ('T', 'G'): -2, ('T', 'H'): -2, ('T', 'I'): -1,\n",
    "    ('T', 'L'): -1, ('T', 'K'): -1, ('T', 'M'): -1, ('T', 'F'): -2, ('T', 'P'): -1,\n",
    "    ('T', 'S'): 1, ('T', 'T'): 5, ('T', 'W'): -2, ('T', 'Y'): -2, ('T', 'V'): 0,\n",
    "    ('W', 'A'): -3, ('W', 'R'): -3, ('W', 'N'): -4, ('W', 'D'): -4, ('W', 'C'): -2,\n",
    "    ('W', 'Q'): -2, ('W', 'E'): -3, ('W', 'G'): -2, ('W', 'H'): -2, ('W', 'I'): -3,\n",
    "    ('W', 'L'): -2, ('W', 'K'): -3, ('W', 'M'): -1, ('W', 'F'): 1, ('W', 'P'): -4,\n",
    "    ('W', 'S'): -3, ('W', 'T'): -2, ('W', 'W'): 11, ('W', 'Y'): 2, ('W', 'V'): -3,\n",
    "    ('Y', 'A'): -2, ('Y', 'R'): -2, ('Y', 'N'): -2, ('Y', 'D'): -3, ('Y', 'C'): -2,\n",
    "    ('Y', 'Q'): -1, ('Y', 'E'): -2, ('Y', 'G'): -3, ('Y', 'H'): 2, ('Y', 'I'): -1,\n",
    "    ('Y', 'L'): -1, ('Y', 'K'): -2, ('Y', 'M'): -1, ('Y', 'F'): 3, ('Y', 'P'): -3,\n",
    "    ('Y', 'S'): -2, ('Y', 'T'): -2, ('Y', 'W'): 2, ('Y', 'Y'): 7, ('Y', 'V'): -1,\n",
    "    ('V', 'A'): 0, ('V', 'R'): -3, ('V', 'N'): -3, ('V', 'D'): -3, ('V', 'C'): -1,\n",
    "    ('V', 'Q'): -2, ('V', 'E'): -2, ('V', 'G'): -3, ('V', 'H'): -3, ('V', 'I'): 3,\n",
    "    ('V', 'L'): 1, ('V', 'K'): -2, ('V', 'M'): 1, ('V', 'F'): -1, ('V', 'P'): -2,\n",
    "    ('V', 'S'): -2, ('V', 'T'): 0, ('V', 'W'): -3, ('V', 'Y'): -1, ('V', 'V'): 4\n",
    "}\n",
    "\n",
    "\n",
    "def alignment(v, w, indel_penalty=5):\n",
    "    # Prepend a '-' to both sequences. This is used for handling the initial gaps in alignment.\n",
    "    v = \"-\" + v\n",
    "    w = \"-\" + w\n",
    "\n",
    "    # Initialize a list of scores for the sequence v with zeros.\n",
    "    current_scores = [0] * len(v)\n",
    "\n",
    "    # Initialize the first row of the alignment matrix. \n",
    "    # It represents aligning sequence v to an empty sequence w.\n",
    "    for i in range(1, len(v)):\n",
    "        current_scores[i] = current_scores[i - 1] - indel_penalty\n",
    "\n",
    "    # Iterate through each character in sequence w.\n",
    "    for j in range(1, len(w)):\n",
    "        # Initialize the next row of scores with penalty values for aligning w[:j] with an empty sequence v.\n",
    "        next_scores = [-indel_penalty * j] * len(v)\n",
    "\n",
    "        # Iterate through each character in sequence v.\n",
    "        for i in range(1, len(v)):\n",
    "            # Check for the BLOSUM62 score for the pair (v[i], w[j]). \n",
    "            # If the pair isn't directly found in the BLOSUM62, swap the order.\n",
    "            key = (v[i], w[j]) if (v[i], w[j]) in BLOSUM62 else (w[j], v[i])\n",
    "\n",
    "            # Update the score for the cell [i, j] in the alignment matrix. \n",
    "            # It is the maximum of three possible scores:\n",
    "            # 1. The diagonal move (match/mismatch with BLOSUM62 score).\n",
    "            # 2. The horizontal move (insertion in v or deletion in w).\n",
    "            # 3. The vertical move (insertion in w or deletion in v).\n",
    "            next_scores[i] = max(current_scores[i - 1] + BLOSUM62[key], \n",
    "                                 next_scores[i - 1] - indel_penalty, \n",
    "                                 current_scores[i] - indel_penalty)\n",
    "\n",
    "        # Move to the next row for the next iteration.\n",
    "        current_scores = next_scores\n",
    "\n",
    "\n",
    "\n",
    "    return current_scores\n",
    "\n",
    "def score(aligned_v, aligned_w, indel_penalty=5):\n",
    "    # Initialize the alignment score to 0.\n",
    "    score = 0\n",
    "\n",
    "    # Iterate through each position in the aligned sequences.\n",
    "    for i in range(len(aligned_v)):\n",
    "        # If there's a gap in either sequence at position i, deduct the indel penalty from the score.\n",
    "        if aligned_v[i] == '-' or aligned_w[i] == '-':\n",
    "            score -= indel_penalty\n",
    "        else:\n",
    "            # If there's no gap, fetch the BLOSUM62 score for the aligned amino acids.\n",
    "            # If the pair (aligned_v[i], aligned_w[i]) isn't found in the BLOSUM62, swap the order.\n",
    "            key = (aligned_v[i], aligned_w[i]) if (aligned_v[i], aligned_w[i]) in BLOSUM62 else (aligned_w[i], aligned_v[i])\n",
    "\n",
    "            # Add the BLOSUM62 score for the pair to the alignment score.\n",
    "            score += BLOSUM62[key]\n",
    "\n",
    "    # Return the final alignment score.\n",
    "    return score\n",
    "\n",
    "\n",
    "\n",
    "def middle_edge(v, w, top=0, bottom=None, left=0, right=None):\n",
    "    # Handle the default values for bottom and right based on sequence lengths.\n",
    "    if bottom is None:\n",
    "        bottom = len(v)\n",
    "    if right is None:\n",
    "        right = len(w)\n",
    "\n",
    "    # Calculate the middle column in the alignment matrix.\n",
    "    mid_col = (right + left) // 2\n",
    "\n",
    "    # Calculate the scores from the source (start) to each cell in the middle column.\n",
    "    from_source = alignment(v[top:bottom], w[left:mid_col])\n",
    "\n",
    "    # Calculate the scores from each cell in the middle column to the sink (end) using reverse sequences.\n",
    "    # The results are also reversed to align them properly with the \"from_source\" scores.\n",
    "    to_mid = alignment(v[top:bottom][::-1], w[mid_col:right][::-1])[::-1]\n",
    "\n",
    "    # Determine the cell in the middle column which gives the maximum combined score \n",
    "    # when considering the path from the source and to the sink.\n",
    "    max_len = -1e10\n",
    "    for i in range(len(from_source)):\n",
    "        current = from_source[i] + to_mid[i]\n",
    "        if current > max_len:\n",
    "            max_len = current\n",
    "            index = i\n",
    "\n",
    "    # Do a similar computation for the next column to the right of the middle.\n",
    "    from_source_next = alignment(v[top:bottom], w[left:mid_col + 1])\n",
    "    to_sink_next = alignment(v[top:bottom][::-1], w[mid_col + 1:right][::-1])[::-1]\n",
    "    \n",
    "    max_len = -1e10\n",
    "    for i in range(len(from_source_next)):\n",
    "        current = from_source_next[i] + to_sink_next[i]\n",
    "        if current > max_len:\n",
    "            max_len = current\n",
    "            index2 = i\n",
    "\n",
    "    # Decide the direction of the middle edge based on the max scores in the middle column and its right neighbor.\n",
    "    # \"D\" for diagonal, \"H\" for horizontal, and \"V\" for vertical.\n",
    "    if index2 == index + 1:\n",
    "        return \"D\", (index + top, mid_col), (index + top + 1, mid_col + 1)\n",
    "    if index2 == index:\n",
    "        return \"H\", (index + top, mid_col), (index + top, mid_col + 1)\n",
    "    return \"V\", (index + top, mid_col), (index + top + 1, mid_col)\n",
    "\n",
    "\n",
    "\n",
    "def linear_space_alignment(v, w, memo=None, top=0, bottom=None, left=0, right=None):\n",
    "    # Set the default values for bottom and right based on sequence lengths.\n",
    "    if bottom is None:\n",
    "        bottom = len(v)\n",
    "    if right is None:\n",
    "        right = len(w)\n",
    "    # Initialize memoization dictionary to cache computed alignments.\n",
    "    if memo is None:\n",
    "        memo = {}\n",
    "\n",
    "    # If the current alignment subproblem has already been computed, retrieve its result.\n",
    "    if (top, bottom, left, right) in memo:\n",
    "        return memo[(top, bottom, left, right)]\n",
    "\n",
    "    # If either of the sequences is empty, return an alignment consisting entirely of gaps.\n",
    "    if left == right:\n",
    "        return \"V\" * (bottom - top)\n",
    "    if top == bottom:\n",
    "        return \"H\" * (right - left)\n",
    "\n",
    "    # Get the middle edge and its start and end points.\n",
    "    mid_edge, start_point, end_point = middle_edge(v, w, top, bottom, left, right)\n",
    "\n",
    "    # Recursively compute the optimal alignment for the left half, \n",
    "    # up to the start point of the middle edge.\n",
    "    node_start, midpoint = start_point\n",
    "    path_left = linear_space_alignment(v, w, memo, top, node_start, left, midpoint)\n",
    "\n",
    "    # Recursively compute the optimal alignment for the right half, \n",
    "    # starting from the end point of the middle edge.\n",
    "    node_start, midpoint = end_point\n",
    "    path_right = linear_space_alignment(v, w, memo, node_start, bottom, midpoint, right)\n",
    "\n",
    "    # Concatenate the left path, middle edge, and right path to get the alignment for this subproblem.\n",
    "    result = path_left + mid_edge + path_right\n",
    "\n",
    "    # Store the computed alignment in the memoization dictionary and return it.\n",
    "    memo[(top, bottom, left, right)] = result\n",
    "    return result\n",
    "\n",
    "\n",
    "def backtrack_path(path, v, w):\n",
    "    aligned1 = ''\n",
    "    aligned2 = ''\n",
    "    i = 0\n",
    "    j = 0\n",
    "    for arrow in path:\n",
    "        if arrow == \"D\":\n",
    "            aligned1 += v[i]\n",
    "            aligned2 += w[j]\n",
    "            i += 1\n",
    "            j += 1\n",
    "        elif arrow == \"V\":\n",
    "            aligned1 += v[i]\n",
    "            aligned2 += '-'\n",
    "            i += 1\n",
    "        else:\n",
    "            aligned1 += '-'\n",
    "            aligned2 += w[j]\n",
    "            j += 1\n",
    "    return aligned1, aligned2\n",
    "\n",
    "def global_alignment(v, w):\n",
    "    path = linear_space_alignment(v, w)\n",
    "    aligned_v, aligned_w = backtrack_path(path, v, w)\n",
    "    alignment_score_val = score(aligned_v, aligned_w)\n",
    "    return alignment_score_val, aligned_v, aligned_w\n",
    "\n",
    "v='STGNSAKYVSENSVNKPDDDENYHYFRLLFVHKSTQPQPDHMGDFGFREMDIDHPAHGCDFHSPIEMPRNTEMTDYEAEPKPFIYVDHYGVPIAMTECWWVKQEEHQFQYVWSQQMKSTYAVVKTYLAFKCSVHISHAEVNCQVMRMHKVRQFFAVMSNKDHPPIFELYWDYWPINGCSGCMQHGSHSGHIKRVRGAFLGRFMQCYWSRDRFIYQPWEGKQFFGDITKLHAQRGGPDPLQRSEGCHLPAWQCMEWWWENSRGNWHECPQALEIREGLHWWWTPASIDWHVITDVTWFKKHAVNYEPFWVRDENLMAHEPFINCQDAIEHKRFPHEAPYAWQCDLVNHTGKQVTIICSRYWLEQMNECVHADKYHNTVMSYGNELSNGPTKCNPKDTEYMSICVKVVWPFWQRDDAGPIQARPDHRMMWHQVPKSISVEAILKVVETNILQGISWHCMWEQTHVVECTANWKKEIVMLKATGCSTFEVNVMQCTFDTPFWIKYQAVSILYSTGVWYKGKMEYFRIGRSQQNQDLLIVARNFGGLPNKSNVIVQIEDIFIWKLWAILARDLQEADGAGFHGGQEMVFPLDKPRWKVFAPLKMQQPENCSLWLISGYQMRRHKHQATITFKHSTEENAVDDPHVCTDTWQQINHQSNGIQQYMECCSCSHALSEFKQTNYPTGFAAHVEPCGLHCCKLPMYRIKDYFDKSHTEWMGCGRLWCCQNWMYYLYDYFTRSRPKPPWQYSDWPMNTHMKGSKFDIQFEMPDWMCQGWRNALLFTITIMIVASVTRMWMTKNDYVMDMMFEQWENIAMPAHIKLCFDVNAAYMKRPQDGSTDKIRPILATGWCEWFVQPYEWIWWPSTSYGYAYVDQGSNSPFPEYMDTAAMVQSTDNAADHWWFAAYTCPHFFETAFHVDFWVMWQLGKLFTLQTHAAAWNLDSMCTFDLHSEMVGCYDYGRNEWDKEIDYYYLDEWWFDKYNWSQWIDKFMSPHYLGGEINRAKQMSAWLQHYRQANAKCIWAPRITNIAEWVMSDFMFPFYKEDGPQKSTKDWMDRMVQAAWKISHEDMKLGIHECYKCKMDFHFVPCFEIYQYGLNIMHPCIMVRGCDGAPRLMFVRTIALAGFILRSQWCHCWMYGWGGETEARFGVVMPYTDWEHYDPNRKWFPPEFIKMHNGWCDYVQRNQMCRTSHCLCMNSMPYQGDVECYKLSHKQARVQRHSLNFSKQMSAYHWTPWDRAPHGNNWYMNFEVKEAHKMYQARGRIANTTQNTNHMHFIPYYDVTEVWPFKTSHHDMQQNDMWLSKRMAPVQKGVTVLVVEVDFPQLFFQAKNPIVTNIMIEVEDCAHTSPHVQWSKNRARLGDRQKFDLGITTRFCDIGTKIITCKTHFLHKRICVNIPYYPFTRNPCYFGAVITYNARHQISFCCEFYWFNLRYSQFANVKAITVNLAFDTHLVTMYLQVHRMPLCQILMEHFTSFICYHRRWMVRCQEITGVAPMQHGVDSNGECKCLVWIGFLCNSNPSVHNGEDQMSFGVHTEYAYVVARVVYGGTTAFMGFIRMCFVMYCNSTPHENNAWHITTMWSIYQLPNMKEPWKHMPPPVESGTTDQFVYVLDFVGAWWSRFHWVQSLRDEHHPFENWEQGHKMVVYYFVPDTDGQQAGAKNERTAWVTAKHAAWWFLWKTKNVELEWIYLIDFTFCSCMRSHDGYENETIIMYRPKFWIRDKICHTYAHYMVDQDPFEAEIPLYTDNKFMNYQRVGIDLTVTKWIEASTGLAEFSCYKEGRNLRCLSVVFDECVHVGHIANRVDTQFVKHHKDVTREYVADSVYTNRPGHDQEHMYHCPEAVMGTSCTSDKWNCDQPMPCIADVEKQMKTSRQVRPWKPGPVMFPKSQMRHMTMWEYQKPHHDKVDGYDYKKTPIIAQFHDHKTCEMMHMDFEPHYIPFQICMFQYTEPFGFGDWMARKDQDVDQWFKPAVAEMWMAIYPKRFFALQYAPEYYQTYRKGYDELHIWFFMKPIALEFFACEYQSFMVFECLFTLCQKVTQQNLLSYYWLWDQCQGKEWHSNSQVTNWRNFSPHKQWHFFSYQHKIQDPSWASIIEPCGAPAQKFCVDMFVHKRKNDTYWEKGWHHPPSMMRISIYHSPVMQKTPPRKIILTEVYFSQWNGMCLWGCGLLIAEIMVSTICFFQIRKTLPIKHYQMMMLQINQADMQYQETQDCIFPIYNTELDYYGREAQKKHVACENCTVFVKYGCKGGNNKLGQKHEMHPLKIHVFDAHAHSDWHNVLHENRRYGNPYMADCKHNIKFIKDSRVMCLVHWTTSTRWFNYINQAKWNEPWQLKVCGNQVWKMGRCHRTSMMAPIDARQVIGHYDKVNYGNTQNVQIHIQHMYWSTRWDELNTMIRQLRVCRIPMMECRAQSEMFMIHAPGIKYLQNQIWTRQPKEKMLFCEMYWWTCVAMTYCPTTLPGNRNPNSQAGPCTEWRRTYVYWSTQWFLDFIWHQPWLLAETCTYHTVLIAVITLPCRACWRSVATHHYYIAPPGLKTVIGPCCQEDLDWMADVHCPTCPQGCQRKMMGGTPRTQEACIVPCTFRTTNNARHMRQQCQNIDRQCTRQCFWQLTLCWMELSAEPFNDDVVSRETRQQPIFTIHSKFASAIKKIDAADDMCWMEDYWQRDRYCAKSVLLSHPQTGEERRSDLTLKLFKNMICHTSAAGKHWHFVQYKLGNMHKHPPMPILLYRYHTIHLVWGIFKSDFYQFNSRSAPNWCNSPQWWWFPCFDQESMIAGPFFVQQCHCLIMKYGPTKIMPNEIHCAPDFMGPEGDWPCCGWHWVTGCHKPWFHRQGISVTANHHFFKHQCVIQVTTSISLKIHFFVMALFQWTPERPPVCDEVVFPKRHGDNGWFLYNYSSVKMFTPQSEYEIHHTGTVRFICWDNLQFSLYNLRVSWHQAVMEDPICLYLDGQRVNHWQMRSVSEATWGCWFYYSTICYCWCHSIWAMGSQNETALYGGIRDPQQLCITENFLTFMITFNENIKTGLTNAIREIDETNTGQHWTQEFERNCDTSPMHVPITSTDPCIGDDVCLNVAVTWGRDNYIQDRSYWTIRSHENESRWSKTTPAYFCHKHPDKFYQYSQPLQTSRFWSSFFFWAHAPRFTAINGYDLLLVIGLNGTRNDGYYDQFFDNHALEDYFGNHVMVSRSHECYDCPLPVIWLWMDNCTGTSDKGRYNEAYGCSYKATGPTPVFDQTFQHEYWSTCPIRVTDQLYNHGISMQSLSADLRCLTNCFCPDQRMLTISFDWHADHALPAVCPWCSVWDCKPQHNEMQSNADMPWPWIWMFQYLEGANQKNSCCSSSKDFMQAIYMKQMCWIKYYFTRWEYLTMMRKNFLVSIAGTKASNSKYYLWKHEIKIRHTKLPYENCHFTARKECKKNRLLFGGKDKMTCFACPACFHGRNKREHVGHNINYSFCPPPCHIDGDWKGLGWDKQHRPCYFNDNDNDTFCQFKMATEILEFMQNCCIREFDIVDGQKYPFENEGKWMDAVTYCMMVYHTEMGQWINYSHQVAWLKKPHIDRKRMDYHECQLCKKPFMQVKHQLRVKDYGWIETQVGCKTFDDQFIEWRQHLSRVFYHCDCMECAKQAYADNMINICLHVKPLMVSEKSPSAGNECHRYMFMFSSLIQQARTQRCTDKDVMCHFKKPIWHYWDDPFVNACHYKAVKEKWYYWVSAFESHGRGHLKSQRIYVWTLNDMYENGTCSYIQRLLNMDGCLDTWWIDNGRVQIGGNHMNMFQCWDYAERKRWEHWYATMDFVRADHYGYTEMFHLHMMFASQYRDKSFCWQLQTIQGFQGNFCKEGPLAYCMWTPVHLRHPFWDSRRMPLLYGVECYWNQLDTAYQECWNHGQLIDYHRKLYRYMQTRHPWARITRCMNICTIMRDLWLPSVVGGNWSQQPYHCAHIPEMFNGEQCNGQGVEWAMEYREMSDNYAMAYEQPVPEKEERYEDSHTCPHVHNDENFPWEFTRCATYYHLVYVDTWASPMGYMWGREYMCPKQIYDMWLIYSFNGVGGGIVCRNNWWRYLPDNQPPPVHYTFLYVSWPPYFSTYCDFSVEQTDYPMLTCAYIMKFNWAFFPLWGKQPTMDWDYKESTCHEISVEVCQTFEHWCELSVMFWGMPEMMWRTGFDMEAQCWNIWSYGSEHMCFARGAEALVWQWLVLMGPQSQFQHAENDECTSGPKVGRCRKPNSNYKGHEENTYWTFFFHYVDEFSLRYEMSHPTKNSIMELDEQHINIMCWIIVYSMCVGRLNRFNFIDLLAVVKWTGDSSAGAVVPTMDYLIQLRYETAFTSEMAINAMVKINSACDHREACSPKFRLCQSGQMFTHEVSDVWEQYPNFEPFRHDANCATELTTSYMFWHYMMPVEFEEHSQVTLVLYQSKHDFPMAHFCFPIMWTGPTTYLEHGIILDPLDHTMIATSLTSTRVEYVTPPDYDHNCPIWQWWMIYPWYSINGFKWSLNLKMIYSFEFLVFKQWVCPRDPDLNVKTYTIRFRYDNDTEVAIQQMCRQHPPCEIVYSACQFRRAYAPIDDYTTYWDLYRAMNDETPMTWANPLLFSPNAALKMQRTLTEKHQYPSDYWVMARRTTTNAQSWDRVVMSLHGFLAPSGKEMEGPHLFIRKRKMHPYKIVGLIMCWMDSCTFIPHRKDAETDLDNSVVGVTQFCLYMYKRKTTENMFDDELILNMTQRNDPPNMHNIAPTIEQPPQSSDMHWTESKEWKHELADDVDNTCYQYIIHGPAKITKKCMLAQYFPVSKEHNLQPPNKEHAVMGYVEQFQQLWKPIIGILPSTPTHNYGDQTISWDTEIICFIPEMFWHNTDQFWGNMYQKSCRDLEYSWYSGTINNSMNMASKIIKYWDVFRVTMLTWYEYNSFCTLYMDVRLARSADEVPEVAGQIIWRFMCLYWQRDYLVMEFDFVHANGEEFTGNTHGIWEHRSWCPQKAAEIFWTSRYQVGIQQPAIPTALEMNCMLGPKHWDSWLSHHWCAAERPEWHDSFLFGVRFCVVLQSMPTFRWLKKLTSADYDRFLSCQQVPSWCEVVCHLGEDMDFIPPNHCRIQFVHEAGCFKQVPANFCEMVMQNSHMLMINRIGSDCLYCLWMRLTDRHEYPERKYMPNESWIEPMHWRNHIVWHGEDFHYQELRNEFKVVTDMWFFLRVDSGNEWLFFMDFMPMGHLPIILFMPCRAFEPGSKFRHSSYRIRAESWAQAQFGGGTRLQWPRKVLWTTMMRQWQGICILADSEYFKYEISKCHLNTKGAFDIHWMLIERPCHGREMGWLYKFEIPRPLVMGVYYKSHTRLFSVCMVAEMMVRCHPHHPWWPRANEKCHTKKHAIQERHFCCLTIVIDVYKIIADCIRKTFTNRRMTVMTHWSETMWVQPADEAGSESWEPYHEARHRHDKSNDYVIHCFFYGDSWCIQAHICTDIIQTIEMLFDRDQVRRVKLACLMKGRAFPKWKELTHPTSFAMGDCLTPTQAGHFNEPKMNEQQGQWMCRFSRCNLRACANVHHYQKWIPEGDMFWSDFTKVCDNLERCHMPTTNRYDKVDHSMMTKTLLQPAEAYCYQKISQKVMYKCSYEGLCYQYLTNGMMIYCYLDQWLYHTMSTESCSWGCVQMVKARPQYQYHEDIDMSQLGGAMERPTKAACWHKGCQRSHHPWMVQTMYSRYMDWFGHERQMGNAHNHTERLWQPPSIDRACPVWLKRTFGRTWGNVYREGHDRVTDMRSSKFKMNGMFGDEQKRRGGFYWICSTKNWLWWQFVGEYGVENDWPSDSLGEVYAFAHVHVGVDAACQKHWFLGVRMGAAHDTYMYWNFIDVGYVIPFREQIKGNTNPMCKLVDDNNWPPTAMFIPGVCKMLNENIGGHSAVSNIRWNSEQGTGTKQIATNHCLCQHAGYVDAVERPFHGFCAYVVIADQGSTDQFYELRHESTCYCTIWMLCISKWQPLAQWGTVTYFLSLDKFHLFPSYETFVMYQYALLFPWCAVYSQMNEFNHQMYVRGLYLMLDWMPMAMDRDGGIRAMYPWDWAWEEDDQPYDCDGSYWTIVKCCCDQKFYKLWDQTITTIWEWAICFGYDVMKQCPSSWNTQDWQAQVKSQGQQMCDMRMRSCIIFYPWCNMTDHRWTCDHMCDINIRMDGDKFGYEGDKFQEMYSTNTMWMEYNKDTTTTFIWMCFLHITRYAKTTNESESEFWNKAEAWPPENTLSQNQDVDWECCYQFHNYAKKCNKTFSESIVEKKSIFRDCRTDLSYGMQKMYPYYNTGTCRSVAMRYSEEDGMNLQYSLDLHNWWYSNSEPGSICKEDDIDAEIWNGPYTGKTEPVACHVGDAITTFCFSWCCCQPIAIYWNQVKFWAVYLELTANQWQKSWTDFVCRGMSICCAQYPYEIYCDEPKTCGGMWSFRELGFRDNVRERENWVGNFPYCTYWERIHYTHHDRYFNTMNYFGSGHTPVQVQTIPRFCRNLLQLDRARVRRCVNGEYPNPNPYVLSPCKMGQEWEVPMGLLNDEWWPTDMAVRYSPRGCMAKLCQSTWRWEMMGVEKTSKMVERGHNPYVFFTASHSQHKPMMLHQHEATSMLQRPGKAPWDAMDDTWFEFHCTDKWWCEYNVCNMGMPQMQFIMRTCFDSVAKTRPQWWPYRDKFTHHQTWIPTLSPTDPNWQWPIEHYYVNWGSEIFMPRGEMSKMLINITFNKMFDKLQAQRIDQRALDELHKWPKGEDSSTEISATFGFHCNNACPVIQIEMAILMIMQIMDGKAHKDLIHIIVQHCWIIHHHRVRCTESVSCINHSQNEVMVWTPPEHAPAASCWIANKTWRRECMMKYWQKFEQVTGDETHEKGQATQSVCFTPVTFQFLFINNIQEIHSYYFRCELCDIPTYMYHDHNFRMWYSGIVSCSSKEGITQMVLMLQSREGMTMYLMGNHQEQTTMCQPQMDQYYLCLKSQVHGNFFWLQSPVVWEWRRYRCINADQTGQICGCECAFCKCTREGPFRRWENKISKQNDLYFCHGGFISDVIADMQHVDCLDFNCIKPRHWHGVVGCRQSRGVLLHPKYEYQCSITNQDVINDRVVMYKFNCVNPGMGGIVCVEYPKPAQSWGHGDTWICINFFPLTCVSCWIQSGQILEDNSDVCEWKWDAIFRYGDHSKKSSQYLFPWCLWTNQRSTMRLCEVFSFNTHLRAAPQYYRTEYTEMYMEFWCWAADDPKLPEWQTEPAIEQYK'\n",
    "w='STGNWMKYVWENSKPDDDENYHHTTIQTEFRFVEYSTQPQPDHMGDFNFIYYILHPAHHYHDQISPIEMPRNTEMTDYEAEVYRKPHIDFKPDRVVDHTECEAWSQQMKSTYAVVKTWCNQWNVHISHAEVNCKVSWHVYINMMHYRMEYDTKDHYPGEHSWDPIFELYLFYVTSDYWPALGCSGCMESCAHGSHSGHIKRVRGAFLGRFMQHVSRDRFIYQPWLYSNDPGKQFFGDITKLHAQRYAVPHIHGQCSCHLPAWQCMEWWWENSDGSKWHECPETYHIEWALEIRWAWWWTPASIDAHVYCFGKKTMNCPDVTWFKKHYEPPWVDENLMAHEPFINCQDEAIEPYAEAAEDWQCDLVSCVFLQHTQPRCYDVKQVTIIEQMYKQFKTEIHMDDKYHNTVMSTRCNPEDTEYCSGCVKVVWPFWQRDDAGPIQARPDHYMMWHQVPISVAAILKVIEINYLQVTYNVGMWEQTHVVESYRNQGVTERMMYGWLYKEWFSAFEVNVTFDTPFWIVMYDARLWDYQAVKVMSGIYSTGVWYKRIGRSQQNQDLLIVVRNFGGVPNKSGVMHLAAACPVQNCCPYGNTLKARDLQEADGAGFHGGQIMVFELDTIHAYTYRKVFAPLKMQQPGNCSLWLISGYQLRFYQNLLHKGQATITFKHPTMTYWVNWPENAWPHVGVWKKVMVDTPPGFKVLGQIIHQSNGIEQYMECCSCSHALPQDDHDTWFAQRIHVEVCHCCKLPMYRILNYFDKSHTEWMGLGRLWIDIIDPYDCQNWMRYLRYESEFNDYFTRSRYKRRIAFYSLFEEWPMNTHMKGSKFFEMLDWMCQGWRNSQHAESYTRMWPPTWYGRHTKNDYVMDMMFEQKEHFAMKEKGGWNAAYMDRPPFHPTEQLQQPKLATGWKMWWINRPRQPYEGVERRPYCDSYTYRYVDQGQGHIEKNSPFMEYMWTAAMDNAASKMPWVNHWWFAAATCPHFFETAFHVDFWVMWLGYLFTCQTHAQFNQDSCSECEVGCVVEHDIGRNYYYLDWEQWIDLKDKVLLQHYRQANIRRTSGMYITNIQEWCMSDFMFPQKSTKDWMDRMVQRNISWDEPMYSHWKICLEDDREAPFDGLHQSWLDGICGIHECYIYWPQYKMDFHFVPSFVRGCGAPRLMFVFDWTIAGDGFILRKIGYMEARFGVVMPYTDWKHYDPPRKWFTLEFVHPWDYVQRNDMLFVMAQLSGFYKCMDRYGTSMPTQWRWDVSDETFNCYKSHRVQHSLNFSKQMSPCGVWTPWTRDCWDEQPHGCEPMLNWYMNFELKDSQGRAEPNELNANAHQNTNHMHFIPYYDVTEVWPFKTSHHDMQQNDMWWSKRMAPVQKGVTVLVVEVDFPMLKFQAKNPIMTYIMIEVECCAHTSPHVDWSKNRARLGDRQKFDLGTKIITCKHKRICVNIPYYPGAVIYYSFCRQMCFESCFYWFNLRYSQFANVRCITVNLAFDLHFKMNLHMEHFTSFICYHRRIMLKCIQRYIEITGVKQCCWPPMCKCLVWSYPSSFGVLTEYAYVVARVVYGETTAFMHPTNLDFIRHCFVMKECSKSLPEDCSTPHENNAWHITTMWSIYQLPADIYVIKMFVKHCADMFKHNLPKPVESGTTDFFVYVLKTTQHPAFVGAWCRICQSLRDEHHPFENWEQGHKMVVYYFVPDTDGQQVMTAIYPEFTASVTFKHAAWWFLWKTKKVELEWIYLIDFTFESCMRNHDGYENEHVIRDGCIGRPYPIAHYMVDQDPFEAEIPLYYVFSTRFMNYQFVSVGMLMFPYPDVWAHPRLTVTKIIEASTGLYEFSCYKEGRNLRCLSVVHVGHIANRVVTQFVKHHKDVTREYVADKGHSVYTNRPGHDQEHMYTCPEAVDGTSTVYKTSDKWWCDQPMPKCHIWCERSIAQFDDENPSEKQMKTSRQVRPWPGPMMQNFPKPQMRHMYQSVIKKESPQVCILLVGTDVNSRAQLMNIAQFHDHKACPFQCAARNDFHRQPYMVFQYLMQVKYEWRPNFRFWGARKDQRKDIYPWACVFDQGFGFGASFCFDDKAVAEIWYMALQYADSYEEYDELHIWFFQYFGDEDDLKPIALACDCGDVINIVFENRFTLCQKPEKTATQQHAFSTPWEFLSYYWKWHSNSQVTNARNFSPHKQWLFFTYQHKILDPSWASIIELCGAPAQKFCVDMFVHKEKNDTYWEKGWHHPPSMPRISVMEPWTKKQPPRKSIWNDAIVNKIAEIMVSTICFFQINDHYMTWNAKTQKRFHFKIPIKAYMMMMKAFLISKLQINQADMQYMTSNWECTHTIYDCIFPIYNTELDIRNHIRYGSEAQKKHVACQVLKSNCTVFVKYGCIGGNNKLGQKKHPLKIHGFAMHQVLHENRGNPYMADCAHNIKIIKDSRVMCLVHWTTSTQWYNYINQAKWNHPWQLKVCGHAKYEGACPQVWKMGRIHLTSMMAPPDARQVIGHYDVAVDTDFAEVNYGFDHHINHYYWSERWDELNTMIRQLSVCRIIMMECCMILAPGIKYLQNQIWTRQPKEKMLFCEMYWWGCVAMEYCPTTLPGNRNPNSQAGPCWEWRRTYVPLGTQHFLDFIWHQPWLLAETCTYHTVTLHCMACWRSVATYYIAPPGTVIGPCCQEDLDEYIPDVHNYEPPTEPQGCQRKMMCGTPRTQEACIKMIMIRYVNPCTFRTTQCQNIDRHCTRQCFWQLTLYWMELSAEPFRMYTADDVVSRRAHHCHFFTRQQPIHFTCHSSAILKIDAADYMCWMADYWQRDRYVRFNMRLMHPHCRNCSTQGEERRSGMNTTKLFKNMICLTSCTAGKHWHFVQYKLGNMHKHPPMPILHTWQVYHFKLTHLVWGDFLNDFDWTKVFANWCNSPQWWVFPCFDQESMIAPPLFSHLHYFRCHCLIMKYGQTHCAPLIWMINPDGFMGPEGDGRMAPCRMVQYGCHKPLTFEWFGRQMISVWANAHSYFKHQCPRMGYIIQVTTSISLKIHFFMALFQWTAPERPPVCDEVVFPKRHGWNGWGNVSYNYSSVKMFTIHCVTDKVQSEYEQVDACLPSCHYTGTVYFICIDNLQFSLNNLRVSWHPAVMEDDILEIKLACGQMLLDGQRVMYIATNKLNLYQWQMRSVTWGCWFYSSTICYHTPAMGSGIRDPQALCITENFLTLMITFNENIKTGLTNDMTVYIREIDETYWCEYLSLLTGDWWITQEFGINHVPITLRTRDQPFTDPCIGDGVCLNVAVTWGRDIKIQHCHRSYWTIRSHEYQEVEFRPWCWTRWSKTTPAYHPDKFYQYSLRFFWAHAPRFGAINGYDLLLPNIPLNGTRNDGYYDQFFDHHALGGDCPLPVIWLWSDNCTGTSEIGPVQGCIAKGPTPVFDQWFQHKYWSTLKTHNYEHREKRVTDPLYQSLSLDLRFERHTRAPHKFVCYYRQRMLQIEKGALPAVCLWGKVWDCKPQHNEMQSPEADMHFQYLMGANQKNYSVRCSSSKDQCQYWFSTQPDWSGIKYYFTRWFLEMVNLSIAKTKASNQNMEKNIKIRTKLPYENCHFTARKFIGCEPVCKKNRLLFGGKDKMTCFANPACFHVMQKREHVFCPPPQTDWKGLGYVYKRGDPCYFNMFDWNDNDTFCQFKMATLHTDWIYSWTMQNCCIREYDMVDNCILEGVPIFACNQKEFMKNENEGKWMDIVRVTYCEMDDHMYMRMVIRPDLHTQWEKKPHIDRKNKRMDYHECQLCKKPFLGSQLIQEHFCACGPWHFLKTFDDQFIELHVYAQAYHVKPLMVSEKSPSAGNECHRYLFMFSSMTQRCTDDSIQGLNWDVMCHFKKPIWHDPFPYSRTIWGRHYKAVKGKNGFLRFYKMFESHGRGHLKSWIVKHKMIWRIYENGTCEYTQRLLNMDGPLDTWWIDRVQRLRTPPIWHQKNHMNMFVPHLTCWDRKEWPGLYFDDWVVMWRCLERADHYGYTEMFHLQMMFASQYRDKSFCWQLQTIQWFQLAYCGPNMNMPAWTPVDLRRMPLYWNQLDVVIFWGQTCDYVPAYKRIIVCLPRYMQTRHPAIFEFARDTRCMMRDLWLPNVQGGNYWLWMQQGDQCNGQGVEGAMEYREDNYAMCAEQPVPEEEHRYEDSHPTYRCPWVHNDENFPWEFKRCLTFYHLVYVDTCPMGYMWGRERNKPLWMCPKQMYDPWLIYCLELDDNADCKVQFNGVGQGDELFNLWRYLPDNQPPPWHYVFLYVSWPPYFSTDYVFCDKSVSQTDAPMLTLAYIMKFNWAAFPLWGKQPYQQSMDASMEIMVEVLQHFEHWCELSVMWLPTWGMSMQCWNPWSYGSEHMCFRGAEALVWQWLWLMGMVIKRDYSSQTQHAEDECTSGPKYFLQLLRCRKIGWHEENTYWTFFFHYVDEFSLRYEMSHWTINSIMELDEVWCFWHMWAANIMMCVGRLNRFNFIDLLAVAGAVVPDMDYLIQLRYETAFTSLMAINACVKINSACDEACSPKFRIFTASCCDSGFDADMFTHEVSDVWEQYPNFEEDGDAFMFRHDAICATELTTSLEKGQRFMHYMMPVEFHSQVTTSRKHDFPMAHFCFPIMWTGPTTYLEHGIQLDPLVIQWVYYKHYVTPPDYDHNCPDWQWWMIYPWYSINGFKHDLPTSLNLKMEFKQWVCPRDRDNRFVGCDLRVKDNDTEVAIQQCIKFTDNGIEVYSACQNRRAYADQDDYTAYKHRAEIFDLYRAMNDETWANPLLFSPPDQAALKMVRWLTLKHQYPSDYWVTGCARRTTTNAQSWDRPMEMGCDLRDNRGPHLFIRKRKMHPYKIVGLIMCWMDTMTNAWIAFCTFIHRKDAENDLDNSIPPKRVGVTQFCLYMYKRKTILNMTTFLSLCRNDPDKEFRRFPLNMHNIADGKLPGLILLAFKEDTTPPQSSDMHWTESKEWKHNRKYVTWQNLAHGDVKQHIIHSGNTNCQDKPALIMLAYPIFYPEYLPFNQSLYIAQHNPNKETAVMFKHKVKDDIYSTPTSKDTEFWHNKDSWGNWNQISCRDLVHRTLESWNSHTINNSMTSLEMWHWMASWCLDNTQIIKINYDARDGRDLLTWYEYNSFCTLYMISYHKGSYVRLARDPEVAGQNILFTTLSIWWQTDNLLMFVHGNGEEFGNTHGKWELPNMPNRVWCSAVQKESAENWTSRYQVGIQQYPTALEMREPLMQGYCMLKHWDYSLSHHWCAAERWHDSFLFTFTDNPRRHNGETEKPADRFCSCQQVVSWCLDCVVCHLGEDMDFIPPNHCRIQHEAWCFKQVPANFCEMVMQNSHMLMINRIYSDCYDCLHMRLTDRHEYPERKYQKWLIYDTMHWRNHIKWHGEDFHYQELNNEFKVVTSSNEWLFFISNCKGQEDFMPMGHLPRILFRMFEPGSKFSHSSYRIRAESWAQAQFGGCRLQWPRRVLTMMRQWQGICILADSERDFKYTKGEDNMNHCNYDIHFLRYRMLIERSCHGREMGWLWQGLHPRWSPYVMGTAKEAKYAHHPYWERANKNAIQERHFCCLTAWMSKSTIDIFKRERVYKRKTVADVNHMLWTNMTVMTHWSETMWVKPADEANSPPCVWPDSWEPCGVWLHKFQWHYVFPGYEARHRHDKFRDYVIHCFDYGDSTDIIQTIEMLFDRDQWRRVKLAGRAKELTHPTSWAMDELTPTQAGHKNEPVCNEQQGQSLGSKMCRMSGNDCNLRACANGFLHHYGDMFWSDFTKVCHMPTTNQYDKVDHSMMTKTLLQQKCTLHWMGVWECILCHPKGVNQYGVIASYLEQGNYHTMRTGCVQMVKARPQYQYHEDIHGGFIQEQTMSQLGGAMERPTKAACWHRGHQCEMSHHPWMVQTMYGWERQMGNERLPAHVPKQPPSIDRMYVVKHLTNCDDTFVKDMWVYREGHDTVTDMRSPNKFKMNAMFGDRRGSVICQDVVFFPKIRYVYAGATLSERGLDVHCGVDAAVRMGAAHDDLGENIKRTGYKSSVPEKTNTNCMCYTVDDELIFIYNWPPKNSCATKVEAMFIPMSLDVAYLIQMWMMDLIGGIKNTVSAVSNIIWIFTQHWKFYSSTGTTQIALITTNHCLETPQYFLSNLYKMIKVERPNNGFCAYVVIADQGELHSVCMPDIESTNKCTIWMLQISKWQPLAQWGTVTYFNSLDKFHLMPSYETFVMYGYALLFPWCAVYSQMNTFPLMMPDHQMYPSRGLPLMWTSVAMGNSPMGFIRRDGGIRAQYPWDWAWEEDDGSWWTIVKCCCDTLGIMCKFYKLWDQTNNRQAWTKCPDVDHERGTIWEWKQCPSSNTQDWQAKSQGQQMCDYRMISCIIIFSTSNWDPDHSETCDHMCDKFGYEGDKFQHMYSTNTMMMEYNYVQTFPWMCFLHITRYAKTTGPWSNMQDEEMGLKESEFWNKCYKMSEIIIDAWPPENTLSDVYQAHNTRASAQEIMISDSIVEKKSIFRDCRTDLSYGMTCRPGKSYPYYNTGTCRSVAMRYSEETFWWSYAYDPWIMNLQYSLILHNWWYSNSEPGIICKPYTGKTEPMFDHGVHYCARHVGSGQWAITTFCFSWCCDWTQPIAIYNNQVKFQAVNCCRSYKNQWQKKVYWTDFVCRGMSICPAQYPYERGCDEPKAAAPYPSVMCGGMWSFRELGDPDNWVGNFEYCHYWERIHYTMNYFGSSHTKCRNLLPLDRARVRRKVNGEYPNPNDEALTPGYVPCDNSNYCMGQEWEVWFAMGLLNDEWWPTDMAVRGCMAKLCQSTMHPRREMMGVEKTHKQRMPSVSQHKPMMNCGCPTKAHQHEVPIILGYRRTSELQRHGKAPWDAMDDTWDEFHCTDKYNVCVMGMPPMQFIMRTCKYHNYHEWENSKQWQRWPYRHPPYHFFTHHQWWIPTLSPQDRQEQAKFLTTDSCCVNWQKPIEHYYVNWIQDYAEVHYMPRGEYSYMLINITFNKMFEHMSDCLKLQADQRALEDSDPMRLSICLTEISATFKFHCNNACPVHHQIEMAMLTIMQIKDAKWQPFSAHKFAYWHVKYMMRIHRIVQHCWIIHHHRVRCTESVSCINHSQNEVMVWTPPEHAPNCLIANLTWRNECMMKYWQKFEQVTGRETMIRTKGQACQSPCYTPVTEIRLAFINYYFRCELCDIPTYMYHDHNFRMWYSGIVSCSHKEGYTQMVLMLQVRMSEGMQHPSWMCHEQTTMCQPQMYLCLKSCVHGEFFWWRYRCINADQTGQICGCECAFRRWENKIKENDLYFCHGGFISDVIVDCLDHNAIKYTEWISVRHWHLPMAQSRGVLIHPKYEYQCSANFDMNQDVINDRVVMYHMFLIIFEMSLERYCGIVCVEYPKPGDTWILINVVPSTCVSCWWDLRLIWHPDKGNSDVHEWKWDGRYAVIFRYGDHSKKSYQPLFPWCLWTNQRELASFPIFNTHLRAKIKEDGDHYYRTEYAGNEQVLEMYMEFWLPPWQTEPAIEQYK'\n",
    "\n",
    "score_val, aligned_v, aligned_w = global_alignment(v, w)\n",
    "print(score_val)\n",
    "print(aligned_v)\n",
    "print(aligned_w)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c7b9d147",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
