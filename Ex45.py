{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a8ad320a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "346\n",
      "GFRDRMSAFSARAGGWPAENWEITHND----AQ----ICHKLEHYMIENCMAKGWAEAFWRKALSAVCVFKIEFKDCIAGEQP\n",
      "GFCDRMSAFSARAGGWPAENWEITHNDYGKVAQELEAMVHKLEHYMIENCLAKGWARAFWRKALSPVCVFKIGFKDCIAGEQD\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#this matrix is used to assign scores between pairs of amino acids\n",
    "BLOSUM62 = {\n",
    "    ('W', 'F'): 1, ('L', 'R'): -2, ('S', 'P'): -1, ('V', 'T'): 0,\n",
    "    ('Q', 'Q'): 5, ('N', 'A'): -2, ('Z', 'Y'): -2, ('W', 'R'): -3,\n",
    "    ('Q', 'A'): -1, ('S', 'D'): 0, ('H', 'H'): 8, ('S', 'H'): -1,\n",
    "    ('H', 'D'): -1, ('L', 'N'): -3, ('W', 'A'): -3, ('Y', 'M'): -1,\n",
    "    ('G', 'R'): -2, ('Y', 'I'): -1, ('Y', 'E'): -2, ('B', 'Y'): -3,\n",
    "    ('Y', 'A'): -2, ('V', 'D'): -3, ('B', 'S'): 0, ('Y', 'Y'): 7,\n",
    "    ('G', 'N'): 0, ('E', 'C'): -4, ('Y', 'Q'): -1, ('Z', 'Z'): 4,\n",
    "    ('V', 'A'): 0, ('C', 'C'): 9, ('M', 'R'): -1, ('V', 'E'): -2,\n",
    "    ('T', 'N'): 0, ('P', 'P'): 7, ('V', 'I'): 3, ('V', 'S'): -2,\n",
    "    ('Z', 'P'): -1, ('V', 'M'): 1, ('T', 'F'): -2, ('V', 'Q'): -2,\n",
    "    ('K', 'K'): 5, ('P', 'D'): -1, ('I', 'H'): -3, ('I', 'D'): -3,\n",
    "    ('T', 'R'): -1, ('P', 'L'): -3, ('K', 'G'): -2, ('M', 'N'): -2,\n",
    "    ('P', 'H'): -2, ('F', 'Q'): -3, ('Z', 'G'): -2, ('X', 'L'): -1,\n",
    "    ('T', 'M'): -1, ('Z', 'C'): -3, ('X', 'H'): -1, ('D', 'R'): -2,\n",
    "    ('B', 'W'): -4, ('X', 'D'): -1, ('Z', 'K'): 1, ('F', 'A'): -2,\n",
    "    ('Z', 'W'): -3, ('F', 'E'): -3, ('D', 'N'): 1, ('B', 'K'): 0,\n",
    "    ('X', 'X'): -1, ('F', 'I'): 0, ('B', 'G'): -1, ('X', 'T'): 0,\n",
    "    ('F', 'M'): 0, ('B', 'C'): -3, ('Z', 'I'): -3, ('Z', 'V'): -2,\n",
    "    ('S', 'S'): 4, ('L', 'Q'): -2, ('W', 'E'): -3, ('Q', 'R'): 1,\n",
    "    ('N', 'N'): 6, ('W', 'M'): -1, ('Q', 'C'): -3, ('W', 'I'): -3,\n",
    "    ('S', 'C'): -1, ('L', 'A'): -1, ('S', 'G'): 0, ('L', 'E'): -3,\n",
    "    ('W', 'Q'): -2, ('H', 'G'): -2, ('S', 'K'): 0, ('Q', 'N'): 0,\n",
    "    ('N', 'R'): 0, ('H', 'C'): -3, ('Y', 'N'): -2, ('G', 'Q'): -2,\n",
    "    ('Y', 'F'): 3, ('C', 'A'): 0, ('V', 'L'): 1, ('G', 'E'): -2,\n",
    "    ('G', 'A'): 0, ('K', 'R'): 2, ('E', 'D'): 2, ('Y', 'R'): -2,\n",
    "    ('M', 'Q'): 0, ('T', 'I'): -1, ('C', 'D'): -3, ('V', 'F'): -1,\n",
    "    ('T', 'A'): 0, ('T', 'P'): -1, ('B', 'P'): -2, ('T', 'E'): -1,\n",
    "    ('V', 'N'): -3, ('P', 'G'): -2, ('M', 'A'): -1, ('K', 'H'): -1,\n",
    "    ('V', 'R'): -3, ('P', 'C'): -3, ('M', 'E'): -2, ('K', 'L'): -2,\n",
    "    ('V', 'V'): 4, ('M', 'I'): 1, ('T', 'Q'): -1, ('I', 'G'): -4,\n",
    "    ('P', 'K'): -1, ('M', 'M'): 5, ('K', 'D'): -1, ('I', 'C'): -1,\n",
    "    ('Z', 'D'): 1, ('F', 'R'): -3, ('X', 'K'): -1, ('Q', 'D'): 0,\n",
    "    ('X', 'G'): -1, ('Z', 'L'): -3, ('X', 'C'): -2, ('Z', 'H'): 0,\n",
    "    ('B', 'L'): -4, ('B', 'H'): 0, ('F', 'F'): 6, ('X', 'W'): -2,\n",
    "    ('B', 'D'): 4, ('D', 'A'): -2, ('S', 'L'): -2, ('X', 'S'): 0,\n",
    "    ('F', 'N'): -3, ('S', 'R'): -1, ('W', 'D'): -4, ('V', 'Y'): -1,\n",
    "    ('W', 'L'): -2, ('H', 'R'): 0, ('W', 'H'): -2, ('H', 'N'): 1,\n",
    "    ('W', 'T'): -2, ('T', 'T'): 5, ('S', 'F'): -2, ('W', 'P'): -4,\n",
    "    ('L', 'D'): -4, ('B', 'I'): -3, ('L', 'H'): -3, ('S', 'N'): 1,\n",
    "    ('B', 'T'): -1, ('L', 'L'): 4, ('Y', 'K'): -2, ('E', 'Q'): 2,\n",
    "    ('Y', 'G'): -3, ('Z', 'S'): 0, ('Y', 'C'): -2, ('G', 'D'): -1,\n",
    "    ('B', 'V'): -3, ('E', 'A'): -1, ('Y', 'W'): 2, ('E', 'E'): 5,\n",
    "    ('Y', 'S'): -2, ('C', 'N'): -3, ('V', 'C'): -1, ('T', 'H'): -2,\n",
    "    ('P', 'R'): -2, ('V', 'G'): -3, ('T', 'L'): -1, ('V', 'K'): -2,\n",
    "    ('K', 'Q'): 1, ('R', 'A'): -1, ('I', 'R'): -3, ('T', 'D'): -1,\n",
    "    ('P', 'F'): -4, ('I', 'N'): -3, ('K', 'I'): -3, ('M', 'D'): -3,\n",
    "    ('V', 'W'): -3, ('W', 'W'): 11, ('M', 'H'): -2, ('P', 'N'): -2,\n",
    "    ('K', 'A'): -1, ('M', 'L'): 2, ('K', 'E'): 1, ('Z', 'E'): 4,\n",
    "    ('X', 'N'): -1, ('Z', 'A'): -1, ('Z', 'M'): -1, ('X', 'F'): -1,\n",
    "    ('K', 'C'): -3, ('B', 'Q'): 0, ('X', 'B'): -1, ('B', 'M'): -3,\n",
    "    ('F', 'C'): -2, ('Z', 'Q'): 3, ('X', 'Z'): -1, ('F', 'G'): -3,\n",
    "    ('B', 'E'): 1, ('X', 'V'): -1, ('F', 'K'): -3, ('B', 'A'): -2,\n",
    "    ('X', 'R'): -1, ('D', 'D'): 6, ('W', 'G'): -2, ('Z', 'F'): -3,\n",
    "    ('S', 'Q'): 0, ('W', 'C'): -2, ('W', 'K'): -3, ('H', 'Q'): 0,\n",
    "    ('L', 'C'): -1, ('W', 'N'): -4, ('S', 'A'): 1, ('L', 'G'): -4,\n",
    "    ('W', 'S'): -3, ('S', 'E'): 0, ('H', 'E'): 0, ('S', 'I'): -2,\n",
    "    ('H', 'A'): -2, ('S', 'M'): -1, ('Y', 'L'): -1, ('Y', 'H'): 2,\n",
    "    ('Y', 'D'): -3, ('E', 'R'): 0, ('X', 'P'): -2, ('G', 'G'): 6,\n",
    "    ('G', 'C'): -3, ('E', 'N'): 0, ('Y', 'T'): -2, ('Y', 'P'): -3,\n",
    "    ('T', 'K'): -1, ('A', 'A'): 4, ('P', 'Q'): -1, ('T', 'C'): -1,\n",
    "    ('V', 'H'): -3, ('T', 'G'): -2, ('I', 'Q'): -3, ('Z', 'T'): -1,\n",
    "    ('C', 'R'): -3, ('V', 'P'): -2, ('P', 'E'): -1, ('M', 'C'): -1,\n",
    "    ('K', 'N'): 0, ('I', 'I'): 4, ('P', 'A'): -1, ('M', 'G'): -3,\n",
    "    ('T', 'S'): 1, ('I', 'E'): -3, ('P', 'M'): -2, ('M', 'K'): -1,\n",
    "    ('I', 'A'): -1, ('P', 'I'): -3, ('R', 'R'): 5, ('X', 'M'): -1,\n",
    "    ('L', 'I'): 2, ('X', 'I'): -1, ('Z', 'B'): 1, ('X', 'E'): -1,\n",
    "    ('Z', 'N'): 0, ('X', 'A'): 0, ('B', 'R'): -1, ('B', 'N'): 3,\n",
    "    ('F', 'D'): -3, ('X', 'Y'): -1, ('Z', 'R'): 0, ('F', 'H'): -1,\n",
    "    ('B', 'F'): -3, ('F', 'L'): 0, ('X', 'Q'): -1, ('B', 'B'): 4\n",
    "}\n",
    "\n",
    "def alignment_strings_using_affine_gap(v,w,gap_opening_penalty=11,gap_extension_penalty=1): \n",
    "    #v and w are input amino acids to be aligned\n",
    "    v='-'+v #this is done to represent the gaps at the begining of the alignment, create space for potential gaps \n",
    "    w='-'+w\n",
    "\n",
    "    \n",
    "    #These 2D matrices are initialized to store scores during the alignment process. The matrices show the upper, middle, and lower layers of the DAG algorithm\n",
    "    upper_layer = [[0 for j in range(len(w))] for i in range(len(v))] #starting from 0 to all lengths of v and w\n",
    "    middle_layer = [[0 for j in range(len(w))] for i in range(len(v))]\n",
    "    lower_layer = [[0 for j in range(len(w))] for i in range(len(v))]\n",
    "    \n",
    "    middle_layer[1][0] = -gap_opening_penalty #at node 1,0 (beginning of the v sequence at row 1, column 0)\n",
    "    middle_layer[0][1] = -gap_opening_penalty #at node 0,0 (beginning of the w sequence at row 0, column 1)\n",
    "\n",
    "    #initialization step for the middle layer\n",
    "    for i in range(2, len(middle_layer)): #starting from 2 because the first 2 rows have already been initialized with gap opening penalties \n",
    "        middle_layer[i][0] = middle_layer[i - 1][0] - gap_extension_penalty #extension with cost\n",
    "    for j in range(2, len(middle_layer[0])): #starting from 2 because the first 2 columns have already been initialized with gap opening penalties \n",
    "        middle_layer[0][j] = middle_layer[0][j - 1] - gap_extension_penalty #extension with cost\n",
    "        \n",
    "    #initialization steps for the upper and lower layers\n",
    "    for j in range(len(lower_layer[0])):\n",
    "        lower_layer[0][j] = -1e6 #to discourage gap openings at the beggining of sequence w, we set it to a very large negative value \n",
    "    for i in range(0, len(lower_layer)):\n",
    "        lower_layer[i][0] = middle_layer[i][0] #lower represents gap extensions in sequence v and since there are no in the beginning it takes the value of the middle layer at that point\n",
    "    for i in range(len(upper_layer)):\n",
    "        upper_layer[i][0] = -1e6 #to discourage gap openings at the beggining of sequence v, we set it to a very large negative value \n",
    "    for j in range(0, len(upper_layer[0])):\n",
    "        upper_layer[0][j] = middle_layer[0][j] #lower represents gap extensions in sequence w and since there are no in the beginning it takes the value of the middle layer at that point\n",
    "    \n",
    "    #initialization steps for backtracking, stores information about direction\n",
    "    backtrack_middle = [['diagonal' for j in range(len(w))] for i in range(len(v))]\n",
    "    backtrack_lower = [['upward' for j in range(len(w))] for i in range(len(v))]\n",
    "    backtrack_upper = [['leftward' for j in range(len(w))] for i in range(len(v))]\n",
    "\n",
    "    for i in range(len(backtrack_middle)):\n",
    "        backtrack_middle[i][0] = 'upward'\n",
    "    for j in range(len(backtrack_middle[0])):\n",
    "        backtrack_middle[0][j] = 'leftward'\n",
    "\n",
    "    for j in range(len(backtrack_lower[0])):\n",
    "        backtrack_lower[0][j] = 'leftward'\n",
    "    for i in range(len(backtrack_upper)):\n",
    "        backtrack_upper[i][0] = 'upward'\n",
    "\n",
    "    backtrack_middle[0][0] = None #at point 0,0 we have no direction while backtracking for the middle layer\n",
    "    backtrack_lower[0][0] = None #at point 0,0 we have no direction while backtracking for the lower layer\n",
    "    backtrack_upper[0][0] = None #at point 0,0 we have no direction while backtracking for the upper layer\n",
    "    \n",
    "\n",
    "    for i in range(1, len(v)): #iterating through all cells except the first row because it represents the starting point for gap extensions\n",
    "        for j in range(1, len(w)): #iterating through all cells except the first column because it represents the starting point for gap extensions\n",
    "            \n",
    "            # lower layer case, score is collected by considering the gap expension and gap opening scenarios which are stored in the lower_layer matrix, we take the max of these scores\n",
    "            lower_layer[i][j] = max(lower_layer[i - 1][j] - gap_extension_penalty, middle_layer[i - 1][j] - gap_opening_penalty)\n",
    "            if lower_layer[i][j] == lower_layer[i - 1][j] - gap_extension_penalty: \n",
    "                backtrack_lower[i][j] = 'upward'\n",
    "            else:\n",
    "                backtrack_lower[i][j] = 'diagonal' #if the case above doesn't exist we have a match\n",
    "                \n",
    "            # upper layer case\n",
    "            upper_layer[i][j] = max(upper_layer[i][j - 1] - gap_extension_penalty, middle_layer[i][j - 1] - gap_opening_penalty)\n",
    "            if upper_layer[i][j] == upper_layer[i][j - 1] - gap_extension_penalty:\n",
    "                backtrack_upper[i][j] = 'leftward'\n",
    "            else:\n",
    "                backtrack_upper[i][j] = 'diagonal' #if the case above doesn't exist we have a match\n",
    "                \n",
    "            # middle layer case, we calculate the score of a diagonal movement\n",
    "            if (v[i], w[j]) in BLOSUM62: #we check if it's in this scoring matrix\n",
    "                key = (v[i], w[j])\n",
    "            else:\n",
    "                key = (w[j], v[i]) #if not we look up this score\n",
    "            diagonal_direction = middle_layer[i - 1][j - 1] + BLOSUM62[key] #we add the blosum62 score to the old cell\n",
    "            middle_layer[i][j] = max([diagonal_direction, upper_layer[i][j], lower_layer[i][j]])\n",
    "\n",
    "            if middle_layer[i][j] == diagonal_direction: #here we update the direction matrix\n",
    "                backtrack_middle[i][j] = 'diagonal'\n",
    "            elif middle_layer[i][j] == lower_layer[i][j]:\n",
    "                backtrack_middle[i][j] = 'upward'\n",
    "            else:\n",
    "                backtrack_middle[i][j] = 'leftward'\n",
    "                \n",
    "    #traceback step after the calculations            \n",
    "    i = len(backtrack_middle) - 1 \n",
    "    j = len(backtrack_middle[0]) - 1\n",
    "    aligning_traceback1 = ''\n",
    "    aligning_traceback2 = ''\n",
    "    layer = 'middle' #we start tracback from the middle_layer matrix\n",
    "    while backtrack_middle[i][j] is not None: #it continues as long as we did not reach the top left corner\n",
    "        if layer == 'middle': #starting at the middle layer\n",
    "            if backtrack_middle[i][j] == 'diagonal': #we came from a diagonal move\n",
    "                aligning_traceback1 = v[i] + aligning_traceback1\n",
    "                aligning_traceback2 = w[j] + aligning_traceback2\n",
    "                i -= 1\n",
    "                j -= 1\n",
    "            elif backtrack_middle[i][j] == 'upward': #we came from an upward move in the lower matrix\n",
    "                layer = 'lower'\n",
    "            else:\n",
    "                layer = 'upper'\n",
    "\n",
    "        elif layer == 'lower': #then the lower layer, focuses on i \n",
    "            if backtrack_lower[i][j] == 'upward':\n",
    "                aligning_traceback1 = v[i] + aligning_traceback1\n",
    "                aligning_traceback2 = '-' + aligning_traceback2\n",
    "                i -= 1\n",
    "            elif backtrack_lower[i][j] == 'diagonal':\n",
    "                aligning_traceback1 = v[i] + aligning_traceback1\n",
    "                aligning_traceback2 = '-' + aligning_traceback2\n",
    "                i -= 1\n",
    "                layer = 'middle'\n",
    "            else:\n",
    "                layer = 'middle'\n",
    "\n",
    "        elif layer == 'upper': #then the upper layer, focuses on j \n",
    "            if backtrack_upper[i][j] == 'leftward':\n",
    "                aligning_traceback1 = '-' + aligning_traceback1\n",
    "                aligning_traceback2 = w[j] + aligning_traceback2\n",
    "                j -= 1\n",
    "            elif backtrack_lower[i][j] == 'diagonal':\n",
    "                aligning_traceback1 = '-' + aligning_traceback1\n",
    "                aligning_traceback2 = w[j] + aligning_traceback2\n",
    "                j -= 1\n",
    "                layer = 'middle'\n",
    "            else:\n",
    "                layer = 'middle'\n",
    "\n",
    "    return middle_layer[len(v) - 1][len(w) - 1], aligning_traceback1, aligning_traceback2            \n",
    "                \n",
    "     \n",
    "if __name__ == \"__main__\":\n",
    " \n",
    "    sequence1 = 'GFRDRMSAFSARAGGWPAENWEITHNDAQICHKLEHYMIENCMAKGWAEAFWRKALSAVCVFKIEFKDCIAGEQP'\n",
    "\n",
    "    sequence2 = 'GFCDRMSAFSARAGGWPAENWEITHNDYGKVAQELEAMVHKLEHYMIENCLAKGWARAFWRKALSPVCVFKIGFKDCIAGEQD'\n",
    "\n",
    "    score, aligning_traceback1, aligning_traceback2 = alignment_strings_using_affine_gap(sequence1, sequence2)\n",
    "    print(score)\n",
    "    print(aligning_traceback1)\n",
    "    print(aligning_traceback2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "37d7e48f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
