PAM250 = {'A': {'A': 2, 'C': -2, 'D': 0, 'E': 0, 'F': -3, 'G': 1, 'H': -1, 'I': -1, 'K': -1, 'L': -2, 'M': -1, 'N': 0,
                'P': 1, 'Q': 0, 'R': -2, 'S': 1, 'T': 1, 'V': 0, 'W': -6, 'Y': -3},
          'C': {'A': -2, 'C': 12, 'D': -5, 'E': -5, 'F': -4, 'G': -3, 'H': -3, 'I': -2, 'K': -5, 'L': -6, 'M': -5,
                'N': -4, 'P': -3, 'Q': -5, 'R': -4, 'S': 0, 'T': -2, 'V': -2, 'W': -8, 'Y': 0},
          'D': {'A': 0, 'C': -5, 'D': 4, 'E': 3, 'F': -6, 'G': 1, 'H': 1, 'I': -2, 'K': 0, 'L': -4, 'M': -3, 'N': 2,
                'P': -1, 'Q': 2, 'R': -1, 'S': 0, 'T': 0, 'V': -2, 'W': -7, 'Y': -4},
          'E': {'A': 0, 'C': -5, 'D': 3, 'E': 4, 'F': -5, 'G': 0, 'H': 1, 'I': -2, 'K': 0, 'L': -3, 'M': -2, 'N': 1,
                'P': -1, 'Q': 2, 'R': -1, 'S': 0, 'T': 0, 'V': -2, 'W': -7, 'Y': -4},
          'F': {'A': -3, 'C': -4, 'D': -6, 'E': -5, 'F': 9, 'G': -5, 'H': -2, 'I': 1, 'K': -5, 'L': 2, 'M': 0, 'N': -3,
                'P': -5, 'Q': -5, 'R': -4, 'S': -3, 'T': -3, 'V': -1, 'W': 0, 'Y': 7},
          'G': {'A': 1, 'C': -3, 'D': 1, 'E': 0, 'F': -5, 'G': 5, 'H': -2, 'I': -3, 'K': -2, 'L': -4, 'M': -3, 'N': 0,
                'P': 0, 'Q': -1, 'R': -3, 'S': 1, 'T': 0, 'V': -1, 'W': -7, 'Y': -5},
          'H': {'A': -1, 'C': -3, 'D': 1, 'E': 1, 'F': -2, 'G': -2, 'H': 6, 'I': -2, 'K': 0, 'L': -2, 'M': -2, 'N': 2,
                'P': 0, 'Q': 3, 'R': 2, 'S': -1, 'T': -1, 'V': -2, 'W': -3, 'Y': 0},
          'I': {'A': -1, 'C': -2, 'D': -2, 'E': -2, 'F': 1, 'G': -3, 'H': -2, 'I': 5, 'K': -2, 'L': 2, 'M': 2, 'N': -2,
                'P': -2, 'Q': -2, 'R': -2, 'S': -1, 'T': 0, 'V': 4, 'W': -5, 'Y': -1},
          'K': {'A': -1, 'C': -5, 'D': 0, 'E': 0, 'F': -5, 'G': -2, 'H': 0, 'I': -2, 'K': 5, 'L': -3, 'M': 0, 'N': 1,
                'P': -1, 'Q': 1, 'R': 3, 'S': 0, 'T': 0, 'V': -2, 'W': -3, 'Y': -4},
          'L': {'A': -2, 'C': -6, 'D': -4, 'E': -3, 'F': 2, 'G': -4, 'H': -2, 'I': 2, 'K': -3, 'L': 6, 'M': 4, 'N': -3,
                'P': -3, 'Q': -2, 'R': -3, 'S': -3, 'T': -2, 'V': 2, 'W': -2, 'Y': -1},
          'M': {'A': -1, 'C': -5, 'D': -3, 'E': -2, 'F': 0, 'G': -3, 'H': -2, 'I': 2, 'K': 0, 'L': 4, 'M': 6, 'N': -2,
                'P': -2, 'Q': -1, 'R': 0, 'S': -2, 'T': -1, 'V': 2, 'W': -4, 'Y': -2},
          'N': {'A': 0, 'C': -4, 'D': 2, 'E': 1, 'F': -3, 'G': 0, 'H': 2, 'I': -2, 'K': 1, 'L': -3, 'M': -2, 'N': 2,
                'P': 0, 'Q': 1, 'R': 0, 'S': 1, 'T': 0, 'V': -2, 'W': -4, 'Y': -2},
          'P': {'A': 1, 'C': -3, 'D': -1, 'E': -1, 'F': -5, 'G': 0, 'H': 0, 'I': -2, 'K': -1, 'L': -3, 'M': -2, 'N': 0,
                'P': 6, 'Q': 0, 'R': 0, 'S': 1, 'T': 0, 'V': -1, 'W': -6, 'Y': -5},
          'Q': {'A': 0, 'C': -5, 'D': 2, 'E': 2, 'F': -5, 'G': -1, 'H': 3, 'I': -2, 'K': 1, 'L': -2, 'M': -1, 'N': 1,
                'P': 0, 'Q': 4, 'R': 1, 'S': -1, 'T': -1, 'V': -2, 'W': -5, 'Y': -4},
          'R': {'A': -2, 'C': -4, 'D': -1, 'E': -1, 'F': -4, 'G': -3, 'H': 2, 'I': -2, 'K': 3, 'L': -3, 'M': 0, 'N': 0,
                'P': 0, 'Q': 1, 'R': 6, 'S': 0, 'T': -1, 'V': -2, 'W': 2, 'Y': -4},
          'S': {'A': 1, 'C': 0, 'D': 0, 'E': 0, 'F': -3, 'G': 1, 'H': -1, 'I': -1, 'K': 0, 'L': -3, 'M': -2, 'N': 1,
                'P': 1, 'Q': -1, 'R': 0, 'S': 2, 'T': 1, 'V': -1, 'W': -2, 'Y': -3},
          'T': {'A': 1, 'C': -2, 'D': 0, 'E': 0, 'F': -3, 'G': 0, 'H': -1, 'I': 0, 'K': 0, 'L': -2, 'M': -1, 'N': 0,
                'P': 0, 'Q': -1, 'R': -1, 'S': 1, 'T': 3, 'V': 0, 'W': -5, 'Y': -3},
          'V': {'A': 0, 'C': -2, 'D': -2, 'E': -2, 'F': -1, 'G': -1, 'H': -2, 'I': 4, 'K': -2, 'L': 2, 'M': 2, 'N': -2,
                'P': -1, 'Q': -2, 'R': -2, 'S': -1, 'T': 0, 'V': 4, 'W': -6, 'Y': -2},
          'W': {'A': -6, 'C': -8, 'D': -7, 'E': -7, 'F': 0, 'G': -7, 'H': -3, 'I': -5, 'K': -3, 'L': -2, 'M': -4,
                'N': -4, 'P': -6, 'Q': -5, 'R': 2, 'S': -2, 'T': -5, 'V': -6, 'W': 17, 'Y': 0},
          'Y': {'A': -3, 'C': 0, 'D': -4, 'E': -4, 'F': 7, 'G': -5, 'H': 0, 'I': -1, 'K': -4, 'L': -1, 'M': -2, 'N': -2,
                'P': -5, 'Q': -4, 'R': -4, 'S': -3, 'T': -3, 'V': -2, 'W': 0, 'Y': 10}}


def custom_local_alignment(sequence1, sequence2, gap_penalty=5):
    sequence1 = "-" + sequence1
    sequence2 = "-" + sequence2

    score_matrix = [[0 for _ in range(len(sequence2))] for _ in range(len(sequence1))]
    backtrack_matrix = [[None for _ in range(len(sequence2))] for _ in range(len(sequence1))]

    for i in range(1, len(sequence1)):
        for j in range(1, len(sequence2)):
            match_mismatch_score = score_matrix[i - 1][j - 1] + (1 if sequence1[i] == sequence2[j] else -1)
            gap_in_sequence1_score = score_matrix[i - 1][j] - gap_penalty
            gap_in_sequence2_score = score_matrix[i][j - 1] - gap_penalty
            score_matrix[i][j] = max(match_mismatch_score, gap_in_sequence1_score, gap_in_sequence2_score, 0)
            if score_matrix[i][j] == match_mismatch_score:
                backtrack_matrix[i][j] = "d"  # Diagonal
            elif score_matrix[i][j] == gap_in_sequence1_score:
                backtrack_matrix[i][j] = "u"  # Up
            elif score_matrix[i][j] == gap_in_sequence2_score:
                backtrack_matrix[i][j] = "l"  # Left

    max_score = -30000
    max_i, max_j = -3000, -3000

    # Find the maximum score in the score matrix
    for i in range(len(sequence1)):
        for j in range(len(sequence2)):
            if score_matrix[i][j] > max_score:
                max_score = score_matrix[i][j]
                max_i, max_j = i, j

    i, j = max_i, max_j
    aligned_sequence1, aligned_sequence2 = "", ""

    # Modify the traceback loop
    while i > 0 and j > 0:
        direction = backtrack_matrix[i][j]
        if direction == "d":
            aligned_sequence1 = sequence1[i - 1] + aligned_sequence1
            aligned_sequence2 = sequence2[j - 1] + aligned_sequence2
            i -= 1
            j -= 1
        elif direction == "u":
            aligned_sequence1 = sequence1[i - 1] + aligned_sequence1
            aligned_sequence2 = "-" + aligned_sequence2
            i -= 1
        elif direction == "l":
            aligned_sequence1 = "-" + aligned_sequence1
            aligned_sequence2 = sequence2[j - 1] + aligned_sequence2
            j -= 1
        else:
            break  # Break when direction is None (i.e., score_matrix[i][j] == 0)

    return max_score, aligned_sequence1, aligned_sequence2


if __name__ == "__main__":
    string1 = "IWTKHRCNHEFDFWESPDWCLRDFKAHKFHDACYIMKYFKWGPKFFYPRPCWRYAMLINEWNKITLSYMPLWSNWCLYQKNNPAPRSGACHRFNKTNKWRYEPFIVIEDEHQLRCMWRYVDYSDHSCVKKTMCAHPYPELYWPQNDNVGNTHVNSYIGNPYEPFPSEWSTQECRGNQYSRMLTDKGGYCYSEIWVHAWWCDWEANSYRHEGITPVNVVFDSINEPPNWYSGRDGKNWLEMAKQYLYLPFFYNEWICEKNVMMTQCPPDHNQMKNIFTQCLSHMTQSHSCFHVIMSPYYWLMGDPHFTMMWPVLGFSLGYGKRTNFGTCGISPAWQLDTLLIHKRYVIKMPWGVEAWFVFHWKGFVTCFWFGENPKMEWKHVCIWWWERWPSPRCKRGHMADTQRDNATASHLRGYTYRKPHASFQFKMTARGVEITFGRQAIKWYKPSYYKPQAKVLPYQIGFFPIHADDFSVDMSYLSDMYIMNQHMGPPEWSDSRNVRLNIMSCVAGPCHMMSAMENSPAVSRYDVEFKRKCAHKMSIDRWLRQWLLHLPMWLMSAELSGEKQARKKHYESPSMTWMIEIDMRIWFVLWWTCQYLHPEHSFTGEAEARCLYVKGIQQWHYLPKTLLHMKAESIGNIHHANLQWFQEFQPKTDKCYTTMDWYFGTPIANYEDLHPHRFCIYQFQKKAMNKNVQDAGTHFPVGHSIYPMFLAYFCGNWCENLVCGRGCFVHVHKYLWAGCPNAERIIMEMGRWVDHFWCTKACDLHIRSTEMCTPESLHEMWMEFIDPGNYKYKEEPFRDGRWPHMPIEAYYALPSIIHVATWPGVAKKSKNREGNTRTERSYDNDQSMYGRNRFCEMSKCPAIYPFCMIGKQAYFMCAWQQARPVQHEDGYSYSQDYMELWCYVYQDLQYIVWKSKSAYTTWASSDSFCQAACWFPDQDHNVDNLMVMMHRYPNQLWAEENLQEWLYLPYFDRYKSVLFNEIQFPEKDPMVCIGYPQLGRISCWKCCWLNEPFFAKRMGEYTMARADWCTALSVLNGINVRTYCMKKYSNLPSCTLWDQTKPIDMVSLCQSVHPPKWDGADQDPYATMNWMSAHAWNHVLDSNKCMGYCGSVPHLAEIECQPMKWESNITHINWISYEDLPVFTWEEVQCNQPTFIHQFIICYLTSFWIMRQDKGIRWNGFGRNDRQSPCGTLFFMCLGEKWEITHHSDVLPAQCSQCKGFQVTQIDAWIVFWDQTGQPHNLGSQPREPACRYEWTRHNVPFYTMQWLGAPYWRMKYLHSRSIRDFLEFKYMSAAHFVYVCYEGEHPRYGLHTICLFQDFHTQKYIRNGIGEHQVLMSVFPRMMQLDYACPSLCLRYRDLCWYNVDSNEPENLMWSFPNHYWDKWENMVDREHVPMIGVRYQVCMSQWLMNGFHQGWFMPWCMLIFVPWNYLNNHWLCGYRSKGMVFPHCHCRKMSWDFLINIQPLRTCDRQIKAPGEEGIQRRMNIPIPGVTRAEMAIQGGRFYDLMKSCIDIPARSWIAGGTKVPDCSNPTTYDGECWTFSQLYFGVMKMYHHYRVAYEPCRVKKAKIHGDIKERTVYVIEGRQNFELVHLHMAIVMEDSMRNANSKENKMKNKHWTFVYFRTEYRHTNRFEEAVGQMFWCMDETGFQGPESWCHAIMERKWGVRILLVRTAKAPLQKNCSGDNTLWSRHTHILYYGFRMDDSFTYNCCSKYKFIDWVQMVPTPQLTELPNKQPFEWIDSWYLKCAVMWIHQNMKIFPGQQQADVIRWNKFIVMRYLFPHAGWTTSAEQNCLNGVSPMKERASYNKPCGGAPRLQVQHKELNWWNAHMDKFAIMQLWAHQYAMWPGADTCFDDMHIGRINILAEVHTIPFPQMFNVASYYTIMPLHEMVAWCTWQMGQHYDNKKEKLLQRHDINFIVPNKDCWMERPIPCRCRSYQIGDWDRGVGGKKGKGPYTRGWNFKLFSCRASTCVFFDCDDCQGTQEAPHYATFSMAITVMMDQFEDDYKASDSWFFVCTVSHPFYQTNRPENPHGANRNPCPKNKPPRCVKVYKAGMFDNESELWYIKNNDCVFPAAACYRDHMSYDMGWKKQGLYGPDKAKNRLLMISAGSWNIHYNITDVQQMQGIQLPGINYAFNLHAQHSIYIFGWMNVMEACLFALWQHPEIWIMFPIYEWKDQQFTINQPHCEFNEMWMDNMGLEPPEVVHRNTIVASLTCQWLLPNAMNINKNTSMVTWHYKPDTKDIMYDLTDEFSREGSATYKTIDSFYWNVRKCVNKESRQDEHWAWALARYEFMSEPGWCYKVYCCNMTWYGWGQTPVEHEFIQKYIYGRSSIPYIQSNTKHCLSQYREEEFNHSGWNYNQQYRDGEEKVQMNLEWCHDRCWNPFDTAGQNMGCYIPIHHGKVTKEAHAPRQNGEQSETTWKRIWKYPASAEQTIEPRDRGKKFFNWQFTVWIDAEYMDCHKSEKHPEACSSEMFYMQFRDGPRQFKIYMHWFENEQRLFVYWPTYFICEFINYELSWYQHHMNLMNMANMHYKIGFDEFHQCPFIMLPAEMFNYDGMDLQKRTCTKLYDPKRVEHYYLKIQTPLMCYRASDHFVFYIPAVNRTQHAIQEWKMFVDGKGYFTEWVYMGIVKMPKYRHMFIYHRAAKVHSAEIMTDQYMKQIAIYFDVVFKHRDMSTGDDGWQHWTFEWASFIKAHFECHC"
    string2 = "RAFMAHHITPMPINHFFGVASNSCYCDPDHVTEKVHSTSYYMNVYESKLYLMKAFGVALYGTSCQLVKETQRWFKKSTGKLYAHQMARRPVYTKWTSHGTFEDGNGPGTYFEFRYWWIRIQQRQTIQGWGANIQGRIIRALQIELICVYNISNCIHDIRDQFAFDVQPPVPMGQNAATIFCMHYFDIKAYSMEPLTSENGFGWYWVWGHTKSNLLDIMEENFCSMQAPFVMSQRSDSTQGWFWACSNMHIHCARGKFMLSPSMTGIIPMAMREEARTYQCFLNEHEECDDECVRDYRTCGTFLIVFQANGVIWIMYGRRCETKGQTGPATAIIWKGVQPFPNLSLLQPDKYMISKLMPNAEYCPEKPYIREHQVVYFPMFALDSVRRPHARALQKRYPFFPRCIHEKVRFSTMADLCHSKGFHLFWHIQPNVPECDYVVMHHWVCQIKKNWCAPRTRYEIWWHEDCPDGQWGRRQHRQQEMQAKYGLDATDFGEPSNGIRRTMPISADWAFRTRSEWATPHPLFFQRCICEDVFEYTTATCWDFMESMWDEGNMMDPFMISGLFWMMNQTYHMFNTITSPWNICWLWLTCKINYVESEAHTHTWVKTEFYEGDCVYQAGKCPKDFCTYMMWIRMCRNGIDVVGPMNNGTEWDTEPPPARQPDDEAYKSACNIWIYEDKSLGRQIVNIIFWEGQTFSPSKVRDQKTFLIPSVDLANTGLRWKYVPFFFHERQYLHWEPTGWPFFWDAFNMRITFLNFWAKTYDYTGCDKPPIQMVYESGDCNPLKCGIAHQQFWNKAGAARRPKEIVKQEKIEIEPFRNDGRWPHMPICVCTVWKAAYYALPSEIHVATWPGVASKMKVKDYTRAREGNTRLYRSRDNDMWKFMYGRNRFCEMSKYPFCMIRRFISQDPWQARGYSYSQVHTKLWPIQSDSFCQAACTFPDRDHNWQNLMVMMHNWAEENHQEWFNEEPPPTYLNRFCYPCVYAISDCDRYKSVLSNEIQFGHKDSMVCIGYPQGRISCWKCCWLNEPFFAKYMGMVYTMARALSVLNGINVRTYSCTWWDCTKPIDMVPKWDGADQDPYATMNNMSAHAWIKCMHYHNTSPHLCIINRMNEIECQPMKWESNECNDETHINWISYQTLPVFTWEEVQCYQPTFIHQFVKADRAEWNGFGRNDYPCGTLFFMKPHVSEIAFGEERCPHHHSDVLPAKCSRCKGLQVTPDTELYKHIDVWIVFWDQTGQYHNQGSQPREPAYEWCPLTFMLSEEVPFYTMQNLGAPYWWDEFMKKNQNPYYFLEFFRVDWYMSWAHFVPRFLHTICLFQDFHTQKLSVFAPMMSRPVFYLDYACPLLCLRYKDVDSNEHQSHYWDMHVPMIGVWLMHHQGWMPWCVPWNYLAYRDKGMVFPHCHCTKMSWFFLIWIQPLETCDRQIQRRMNIPIPGVDWTMTREEMAIELGGCCIDIPHALRSWIAGYYDSHRVFTKVPDCSNPTKQYLYDMEMFGPHFEMYHHYRPESKNDSGAYEQCTWLVGDISVVKKDIDERTVYVPPATYVYAEGRVRRCMQSVNFAERIWMRNANSKEWTDHIMYMVFVYFRTEYRHTNRFELAVGQMFWCMDEPGFQGPESWCHAERKWGVAQQENIQWNILLVRTAKAPLQKNFSIQMYWYHTHPDVYGFRMDDSFTRRYCEQRLNCCSKYQFIDTVQMVKQPFKRDWIDSWYLKCAVMWIHQNMKIFPTAQTWAIKFADVIRWNKFIVMRYLFPHAPWTTSAEQNCLNGVSPAKERASMDEWPFDAHNKPCGGAYLQVQHKENAHSDKFAIMYLWAHQKHVCMQTYYYCMGPLSNRRHYNWPRYNKEYFHRNTPVTWRDWWGSKARNTGQETGSKCFCAWFGPDIDMLFQCMLSIKESRQDNNGTVNFPLKWADLQTMLRWDNDFCDCFHCWLPNEAERMCWMSYELLMCVTVMRSRVKLYGELTEDHSYRFVVDLDHIRWCSNSSSNPICVWWNCNLQEIYKEKCYSEFMWQRTHEYDPLDNTPSTQDPAMPSSETICIEQDGYANDHRVAADRTYVGRPMACESQQDSWPINARHQQECIYANNMQCHRMDGSRNYRCTILHHCITMAVQGSAYCSSMFGHLTMNMCDEGEKCDHAPMNFWHTVGTAFFCIYNKNMRYYAFPPRQVAKIEYPPHGFDLVNYKCWGKMPGWYYRTFIDYEGPQAICSHIMSACQLPYSHILHAMIMQVKVDFKLVWKYCWLMYWMHNYYSWFTFFQQWEPMNQQAYSWPTPKVCHIFAEFDGSWASWCWDRMPWVINIEPPFSYYGRMRNPTAHVYMIIEWGPIPHVQREMYHHSCTEQEDPFEDYKCKCKQDNEQVHEKYCMKRGASMDMTRYPYGDSYDDAAIQLYDLTAITDYISECFWDSGRDLAQKYWDAKRFILQYGRNPRVSSGHSAGTHYRESWYELNHYVLGHKIWWKNLVHQSWTRRQDPCWEGSSDQWFGHMPYGHSCTDDYQIAVPEREDVCFAFTIKCDKRGHKLYADDKYGFPLFVHHSEHKSVETQQCYFRHFPWESQSITFGPDCYMKNIKSPQCRIAKVVAEKHYWAVNSHMVCSDYWLHKCAHNSDEDWRFATENSQSEMNRIVKLQMYATPMKDNMENERYAYRVGSFLHEHAPFSILPEYN"

    score, alignment1, alignment2 = custom_local_alignment(string1, string2)
    print("Maximum Score:", score)
    print("Alignment 1:", alignment1)
    print("Alignment 2:", alignment2)