#!/usr/bin/env python
# coding: utf-8

# In[4]:


def sequence_alignment(s1, s2, indel_penalty=1):
    # Add a '-' character to the beginning of both input sequences to account for gaps.
    s1 = "-" + s1
    s2 = "-" + s2

    # Create a matrix to store the alignment scores and another for backtracking.
    score_matrix = [[0 for _ in range(len(s2))] for _ in range(len(s1))]
    backtrack_matrix = [[None for _ in range(len(s2))] for _ in range(len(s1))]

    # Fill in the score and backtrack matrices using dynamic programming.
    for i in range(1, len(s1)):
        for j in range(1, len(s2)):
            # Calculate scores for match, delete, and insert.
            match_score = score_matrix[i - 1][j - 1] + (1 if s1[i] == s2[j] else -1)
            delete_score = score_matrix[i - 1][j] - indel_penalty
            insert_score = score_matrix[i][j - 1] - indel_penalty
            # Choose the maximum score and store it in the score matrix.
            score_matrix[i][j] = max(match_score, delete_score, insert_score)
            # Store the direction of the maximum score in the backtrack matrix.
            if score_matrix[i][j] == match_score:
                backtrack_matrix[i][j] = "d"  # "d" for diagonal
            elif score_matrix[i][j] == delete_score:
                backtrack_matrix[i][j] = "u"  # "u" for up
            elif score_matrix[i][j] == insert_score:
                backtrack_matrix[i][j] = "l"  # "l" for left

    # Trace back from the highest score to reconstruct the alignment.
    j = len(s2) - 1
    i = max(enumerate([score_matrix[row][j] for row in range(len(s2) - 1, len(s1) - 1)]), key=lambda x: x[1])[0] + len(s2) - 1
    max_alignment_score = score_matrix[i][j]

    aligned_s1 = aligned_s2 = ""
    while backtrack_matrix[i][j] is not None:
        direction = backtrack_matrix[i][j]
        if direction == "d":
            # If moving diagonally, add characters from both sequences to the alignment.
            aligned_s1 = s1[i] + aligned_s1
            aligned_s2 = s2[j] + aligned_s2
            i -= 1
            j -= 1
        elif direction == "u":
            # If moving up, add a character from s1 to the alignment and a gap to s2.
            aligned_s1 = s1[i] + aligned_s1
            aligned_s2 = "-" + aligned_s2
            i -= 1
        else:
            # If moving left, add a gap to s1 and a character from s2 to the alignment.
            aligned_s1 = "-" + aligned_s1
            aligned_s2 = s2[j] + aligned_s2
            j -= 1

    # Return the maximum alignment score and the aligned sequences.
    return max_alignment_score, aligned_s1, aligned_s2

# Example usage:
sequence1 = "TTGACGTGGTTTCTCTAGCACCACGGATCAAGCAACAGGTGCATATTATAGGTCTTATACGAGGTGGCCTTTCAGCCCGGATATATGCAGTTGCAATATATGTGTATAAGATCTACCATACTGGCGCCCCGATAGCCCTTCTGCGTGAAAAAGAAAATGTTGCTGCATGGCCCAACTAACGAATCTTTATTGAGTCCAATAGTCCGTAAATGCCCGCAACGGCGCAGTGCTCCGGATATACACGCCAGAGTCAGACTAACCTGGCTCTGACCAAGGCCTTCCCCGGACTCAAGGGCAAAGCGGATATTACTACAGCTCGCAACCGCAACGCTGCAAGGGATAGCAGAAAAGTAGTTAAGGTTTCTACGAGTACTGCCGCCGACCAACGACCGGCTCTCAGCTACGTCGCGCTAACTGCTGCCCTGGATTGACTTCGTTCGGAACATCTGGCGATCTACGAGCTTCCCAAGTCTGCGAGGCATACTGCATGTTACTACCCGGGGTAACACAGCTCGTACATCAGCAAAGGCTATTAGGAGCCCGGGATGCCGGTTCTAAATGACTTTATTATCCACGCAGCGAACCGCACCAGGATTAGCAGTTTCTCGCAGTCCGTCCCCCGAGGGGGACGCCTTATCAAGACACACCCTGCCAGCACCGCTAGAATTAGCGGGTCCCAGTAGCGTTACGAATTCGGTCTTGCCTGGTTTCTATGCTTTCGCGAGTCCCCTCGCAGGATCCCTAATGGTCGGTATTTGCATGAGGATTGGTGACCCTCATAGAACCACTGTATGGCATCGAAGGCGCTTCACTCACGCCTACCCAGGAAGGGTGTTGTAGCCATGTCCCTGCACACCCCTGTGTATAATCTAGCCCTCGATTAAATTTTAAATTCATGATACTCCGCGCGCTAAACAGCCACGACTCGAGTTGTATTTGCGAGGAAGAGACCCAGGTGGATATGAGGGTCTGCACCCTGGTACACGTCACTACTCTCAACCAACACCGCCCATCTTCAAATGTATGCTCTTCTCTATAATCGGCCCAAATAAACCTATCCGACACGAAGGACGATCGGAGGCGACCTGTATGATCGGTCATGGTGCGGATTTCTCAGCTCCAAGATCGCCGGTCTGGTGATAATCCTGAAGCAAAGAAGCTAGTGAACCGAACCATTACATAAGCTGGGTTCCGCCAGGCAAGTTTATTAATTCCTAGGTGAGTTACCACCGATGGTCATAGTGGAACAAGAAGACCACGAAGCGACCTAAGTCCTGTGATCAGAAAGGCCTGTCTTCGCGGTGAGGGCGCTCGTCGGACTAGCAATGAATCGTATTCTGGCTTATCTTGATAAACCCAAGATATCATGGCCGCCTAAATCCCTCCCATTGTGGCGGCACAATCTAACTCGGCTTAGGGGTGGTTATAGACTTAAACCGCCTAAAGAATCAGAAGTATACGTATCGTGAGGTCAAGATGGAGTTAACCGTTACTAATTTTTCGGATTTGCTTATAACCAATGCGGTGGCAATAGCATCACCCCTTACCATGCGAATGTTTTGAATAACTTAGGTTATCATGAGCGCTGATTTTGAAATAGCATAAGTCGACTCGTAACACAGGCCGCGGCATGCGATCTTATGTTTAGTCAGTAAGTTGTTTGCGATTAATGCTTGGCGTACCATCTACGGGGCTGAGGAGAAGGTGACACCCCGTCTCGCTTTTACCCGGGATCGGCAGGTTCTTTCATGCAGAAGTTCATCCTTAGCACACTAATCAAGGGTTGTTATGTAGTTGCATTGATATCAGCAGTGTTGAGTTCTATTCAGGAACTTGCATTACGGCCGCATCTTATATGCGGTTCAGATTTTCTGAGACCCTCTGTCATTCAAGGAGTTCTTTCCACTGGTACTTTGTCTGCTTCCAGTCCCACGACTTGGGGGGATGAGATCGATATTCAGACGAAGGTTTTGTCGTTCGTTATGTCAAGATCATATCAAAGCACATCCCGATGGAGGCAAAACAAGCCACTTACGATTATTCGCAATGCATCAACCTATAAATGGACGGGCTCCGCGGAGGAGCGGGTCTGCGCTGGGAGGCAAGAGTCCAAGGTCCGTCTTCCAACAGCCATAATGAGGACCTGGGGCTCCAAGCCGCATGCGAAGGTACACACTGCATCTTCGAGTGGCTACGGCGCACCACTGATTGCAAGTACAGGATTGGAGCGAAGGTACTGCATCTCGCGCAAATTAACATCACAACGCGAATTCAAACGGAGCAGCTCATGCGCTGCTTAGTTGATGACTGCAACGGACTATCAATGTCACCACTCGATGTCTACCCGGGTGCCAACATGGATACAATCACGTCTATCTCAGGTTCTAACTGAAACTAGACACTCCCGAGGGATGTCTTAAACGGGCCCGGGTTACCCCGCTTGTTCTGGTTAGGCATTTTACTCACTTGACGCGTCACAGTTGAACCCCATTACCCCTTAGCGACTCTCTTCATGCTGTCTTGATGTTCTCGGCCTACTAAGATCACGGACCGAAGTATCGAGGGCTGAGGCCTAGGTTTGGATCGGAGGCCGCTAGACTCTTTCTTTACCGGTGAGAATGTACACTCAATCGGATCCTCGCTTTCCCCCAAAAAGCGGGTCGATTGGGTATCCCAGGCCCAAATATGAACGAAACATCATGGATGTTGGATCACATTTCACAATACAACGGCCAAGACCCTTACACCAATACAGCAGCTACGGCAGTCAGGCTGGTGCGTTTCCAGTCATTACGGATCGGTGTACTGAAAGCCACTACCGCGGTACAATGCTGTATCCTTGGGTGGAGCAGTCTTCGCGGAGCGTGGCTGGTGTACGATAGAGTAGAACCGAAGTGACGGTTAGTCGAAATGTCGGCTAGTGACGCTCGGAATTGGGAACGACCTTCTGTATATTGTTATCGATGTTCCCCGAAGCCCTCCGAACTAATACTCAATCTTTTGTAGGTCAAAATAGACAAAAGTCACAGTCTAGCTGACCCTTCTCACTGGTTACCCCACGGACCTCGCAACCACGCAGGTCTATGCCACTCCTGACTTGCCTATCTTTCGAGGTCCTGCTCGCAGGGCCACACTGCGCAAGCGACCTCGCACGTACTAAGAAACATGGCCCTAAAGAAATGTAGTGATTGGAGTGGGTCGAATGTCGTATCATTGTGCGTAACAACCCTTCATTGCACTTGATTGCGCCGCCCTCCCCGTATGGGAGCAAAGGCCTCTGTATCACCATTTCGATGTCGGCGGCTTACTGAGCGTCACTAGGTCGCCAGAAGTACTAGACTATCAACTATACAGTCCTCTCGGTACTCAAATTATAGTACCTCGCCCTCTAGGACCTTCTGGATCGCAGCGTCTACTAATTAAACTTGTACGTTCACATCGAACCATCGTTGACCACTACTACTGAATAGAGTCCAATTGATGGTAAGCGTACGATGCAAAATATGGACGTTCTGATGGTCTCGGACTCAGGAAGTTCGACCAAATGTATTCACGCGAAAAAATGTGAGGCCAAGGCTTTGTGAAACTGCCGGCTTGTACCTGATGTGCGTCATCTTGTTCAGTCTTGTATTTGTGTTGAGGGTAACCTACTATAATCCTACTAATAAGCCCCAGGCGTTTGTCATAAGTGTGGTACTTAATCGGATATCTCGGTGCTAACCATCGTCGTTAGCTAAGTGATCTTAATCGACTTGTATTACACCTCTTAAAAGCCCGATGCACTTACACCTTTGCTTCGAGCCGACGTAGAGCGAGAAATGTCTTGTTATTTAGACTTGTACAATTCGTGCCGCAGGAGGCAGGTCTGCCGAACGAAATGTAGTTACCACTATCCCCGAGGAAGAAATGGATTGGATTTGAAGCAGTCGCGGAGGGCGTCTCCGACACCTAATAATTACAGGAATCGCGTACCTTAAGTCTGGACAGGAAAAAGTGTGAAGATGCGTTAACCCTATGAGACAATTTAATAACCGCCTCAACCTGCGGTACAGGACGTCCATATTCCTGCTTCGGAATCGCAACGCTGTAGAAATTAACTCGATAGAGCTCGCGTGGATACACGGCCGGGGCCTCCGCTGCCCTTTCGCGGCTTGCACCTCGATGTAAGATGGAAAACACAGTATGACTGAAAGTGATGACCGACAGTGTAAGCCTCTACCTGGTCCCCGAAGTAAAGAGCCGTCTCCATCAAGCCGCAAACATTAAGCCCGATCAGGAGAGAGAATGAAGATGGCGGAATTCGCTAATCCCGAAGGACAAGGCCGATACCCCCCTTAATTTCGAGCCGAGGACTCACACTGCTATAGCCCCACAGCTTTGGGGCCGACTCGGTCCGAATATCCAGCTTGGACCTATGTCCGAAAAGTCGAGGACTAGCCCCTTTCAACGGTAGGCGGTGTGCATGATAGAGGGAGAACCATATCTCCGCTGAAAGCATTTCTCATCCTAACACGACTGACAGCAGATAGGGTGCTGACGACTGATCGAGACTGTATGGGTATTGGCCTAAGCAAAGGAACATCTGCTCCCCGTATCGCTAGCAAGCCATGGCATTGTTGGACTGTGAGCGTTAACCTTAACCATTACTTAGGCAGAAACTGCCGGTTCTATATACTAAAACACGGGGGAGGTAGTGGGGAAAATCCTTTCTCGTGAGTCGTAAAGTGGGTTTAAAGATTGGTTAGAGCGGAATTACAAACAGCGGACTTTATCCAAAAAACGTAATGAATTTGGAATTGTTTGCATTCACGGAAGCCCGTACGGACCTGTGAAGGTCGCGTACTGGTTGCATTCGAATCGGCTTAAGTTACCCTCTTGTAAAGGTCGTTATTGGTAATGACAGAGCTTTTTCCTACCTTAATTTCGCTGTACAGGATTACACCACCCCGACCAGCCCATGAGGGCGTAAAAGGTATTCTAAGTACTGTAGTGCTCGAGGGGAGTGGACCCTGAGTTCCCTCTTACGGATCGCGGAGAATATAGCCAATTTTAATATCTTAATTCGATGCGAGACTTCTACCCGATCAAAAATAGTCTCCCCAGGATAATAACGTACTTCCGCGTAGGCGAATGCCCTAGGGCACATTACTTATACCGGTCACATTCCCTTGATCGTCTCTAGCTTGGTCGGAACTTCATACTATCGATCGCTAAGTGCGCAAACAAAACAAGCGTATGTGTCCTCCAGTAAACTGGGCCCGAGGCCAATCCTTGGAGCAAGTGCAATCGAGTAAGAGTGACCCATGTCAGGTCAAGATCAGGTAGCTCGTTGCCAGGCGCCGGACCCATAATGGTATGCCCCTGGAAGTCCCACCAGACGGTCATCGAAGTAGGCTTCGGTAGGTGTAGTGGCTCCACAGCCTTACCGCCCCCCGCTCCTCGTATCCTCTGAATCTATTAGCCCAGGGAGTTGCGTGAACCGTTTACTTGGTGACTTAGTATGAATACATCAGGATCTGGATCGCTCGTTTAACCGAATTGGAGAAAGGCGGCGGGAGTTACGTGCGGACATAGCTGCTCTCAAGCGCTTTCTTTACTGTCATCACCCAACGTATACGAAGACAGCGTTTATCCAGCGGATTGTTTTGCCACGCTTGTGGACGATAGCAGTACTCTGTACAATCGTCCGGTTACTAACTAGAATCCGATTTAAGCGTGTTGGTTTAAATCTATACGCAGTCCAGATCGAGTGTATTATGCCGTACCGGATAAAGACGCTTAATGTAGCAATTCGCGCATTGTTCAGCGGCAGTAACCGGGGCGTCTTTCAACAGCCGCTACTTGTTAAAATTATCAAATAGGATAAAGTGGCAGGGGGTCCGCCAGACTCGTCTAACAGTAGGAACTGTCCTCATGGATAATGCTAGATAAAGAGAGAGCTTTGTACCTTCTTACAATCGTATCAAACTTCGGATAGACCGGGTAGTCGATACCTAGTGGCAGTAATAAGGATAAATGGACGTTCCGAGGTGTCGCCTCATCCCGAACATCCCAACCATAGGGATTTGCTGTTACTATAGATTTGTCACCCCACGGCTGGACCTTTTAGCTGGACCTCTTGGACGGTACGACTGTGCCATGGCGGGATTAAACATGGCTTTCGTCTTACTCGCTGTCACCGTTCGTTGATGACGGGCCCGTCCCCTTAGTCTACCGATACTGACTGGAGTCAAGGTATGGAGACGATTCGCTTGCCGGCGGGGACACAACAAGTCTCCCGGAAGACGACTTCTATTTCCGATTATAGAGTTTACTCTGACTATCCATCGAAACGGTTTCAGAGCAGATCTATCCGAAACCCAGGCGCAATACGAATATCTTGCCGCCCGTGAGGATGGAGCGAGTGTTGAAGCAGTACCCTCAATTTTCCCCACCGGGGCACGATAACATTGCTCACTCGGTATCAATAGTCACGATAGGCCGTCTACAATTTTATGCTTTTGCTACAACTGAACCTCGCTCCCAGAATCTGTATCCGGGTCAACAGAGATAACCAAAGACGGCCGGTAGCTATATTTCAAATCGAACCCACGACATACCGACCGGGATGCACCCAGCGAATGTACCTCTTGGAGCAGGAAATAGTTAGGCGTGAACGTCCGAACAACGTACGTCAATAATTCCACGGCGTTACGGCTTGATGTGGCGGTGTTATCAGACTAGGTGACCACAGCTTGGATATGAGCCTGTTATGGTCAAGATATGTCCTCTCCTCCTAGCCGGCTTTATAGGCTATAGGGTCGTGAACCAAATGCTTGAAGTGGGTCCCCCAATATCATGAAGTCAGATTTGTATGATCCAGGGATGCTTTGTCAAGAGCCGTGTGGTTTGTTGGATGGTGTAATCCGGAGAACGACGGGATATGATGCAGCGTTATAATTATTCTGTAATACCTTTTCCTAAAGGTAGGGGATATTACCATAAGAGACAGGTTTATCCCGACCGCTTCTAAATACATTCGTAGGCGTGCTATATAGTCACAGCGGACTGTAAATTCACGTGAGCGGTACTCTCGCGACGTAGTTAGAGACCTGTCTTCCGTAGCAAAGCGACCCGGATGACGCGTAATCCACCCTAACACGATGTATTCCTTATTTGTTTTGCAATAGTTAAAACTGTCGTTGATCGCTATCGCGAAGCGTCAGATACGGCTAGGTAAACCCGGACCTGTGGATGCCATGTAGCTTGGTCCCACTTGTGGTGTTACTTCACCTCCAAACTCCTTTGACCTCAATGCCCCACGCAACGCGCATATTGTTGAAGGACGAAGTCAAGTGCTGATCTAGAGTTAACTTCACGATATGCTCCGAGAAAAGAGACGCGCGGCCTGTTTGATCATCGTCCTGAGCGGGATGATGTATGTTGGCGTTTATACCAATGTCACCGTTGTAACCTGAGCAGCCCGGACTAGTCAAGCAAAGATGTACTACCTTAGGAGGTTTATAAGATATTGATTTTACCATGTACCATGCGTATAATTGTTCGTATGGCAGCTGTGTGCCCGACGCATTAGAGCAGATTGCGAGCATCTTACACAGTTTGCCTTATAGGGTTATCGCACGTCCGCGTCCCATGAGCTAGGCCCAATAACCTCAGCGCTTTATCAGTAAGCTCCGGAACATCCGCGTACTGTCCCCAAGCCAAAAGTGGGAGCCTAGATCAAGTGTGCGCCGCGGGTGTTCGCCTGATACCCGGATCGGTACATGTAACACGGCGGGCTTCCATAATGTATTTTCCATACGTAACTCCATTATAGTATCACCGAGTATTGCGTTAACACTCTATTTGCCCTCTTCTGGTTACTTGTACAAGGCACATAGACTCTCCTTGACTATTTTAGAAATCAATACAATAGACCAAACTCGGGAAAACCTAAATTGGTTTCCACGTATTGTCCGAGCGTTCGCCGGTTGGACACAGCCGCGAACAACTACTAGTAACGATGTCTTGGACAATAGGAGCAAGGCACCAAGCCCCTAGCTTGCTGGTACCATTGTCTCGAGATCGCGTGCATAGCATTCCTTCGAATGTAATACAGACGATGGGTGTTCTGAGCGTATGCGCTTCTCGGCCCTCGCTGCGGGTCGTAGTACAACGAGAAACTCTGCCGCCTCTCTATCGAGCGTTGATCGAGCTACCTTTATTGAGTTCGGGGTAGAGGTCGTAGCTTCAGCCTCGTCGGTGAGTCTCTCTTTTAACCGCCGTAGCATCCAACGCTGCAGAAAAGTGGTTACAGCTACTGAAGACTCCGACCGATGCACGTTGCAAAGACTACTCGCTCTCCTTAACTCAGGTACCCGTTGCTATATAACAGCTCTGGTTTATGAGCATATCATCGAGTTAACAGTTGTCGCCGTGTAAATATTTCGAGCCTCAGCGCACTTCCCAATAGTGGATCGGCACCTATATACTCACAAACCCTCGAAATGGTGCTAACGGAAAGACGTCGTGAAACCCAGTGCTAACCCAATCCGAAGCAAAGGGAATGGTCGCATGGGACTTTGATGGCGCTCTGGTGTCTGAGTGCGGGTCTTCTAAAGGACCGTAATGGAGCCTGACAACCGCAAGTCTTTTATTTATCACCCTCAGCACAGTTAGGGCGCTGAAGCGTCTCATTCAGCCTGTTCCGTCCACGTGCGCTTTTCCGAGACGAACTTGATGGACGGTATGCCGGGCCAATACTCAGTGGGCTCATTGTCTTAAAATGTTAGAGCTTGGTCAAATTTTCAGAGGGCCATACGCTCCTCGGAATTGTTACCCGTGGATAAAGAAATTGTTCTGCTCTATCAAGACCATTCATCAGTGTCGCCTTGATAATCGTGCTTGGCCTCGAACTTCCGGGGCTCCCCTGCCGCCGACAGTAAGCTAACACGTTACCCAGGTGCAGGGGCGGATCAAATGAGCAATAATGAGAAGCAAATCCTGGTTTTAAGGTTTCCACTTGTCAGTCCAACGGTGACAAAGGCCTTGGATAAGTGTATTGCCCCGCTCGTATACACTACTTCACACCTCTTGGTACACCTTACTGGTGACTCGACTCGCCTATGTGTGCTTCTGGTGGGTAGTTCTTAATAAGGGCTAACTGGCCCGCCTTATAGATTGTAACGTTGTGGGCCGATTCCTACCTCAACAATCCTGGTAGGGTCCACCATCGAATGTCTTGATGTGCCAAGTCACGGCTTGGACAAGTCAACTAGACGACAGAGGCACGTCGGCGGCCGTCTATACTACTTACGAAGTTATATTTGCTGGACGGTACGCTT"
sequence2 = "CCCCCATTTGCTGCAGTACGAAAGCCGAGATAAGGCCGCTCGGAGTAATTATCGCGTACGAAAGTTTTCGACACGGCCTGAACAGACCGAGTTGAAACCCTATCTTTCTCTTTCGAAAGGACTTATTTTGACCTACGCTTTCAAAGATACGATCTCTGTTGTACCCCCATATACGACTCGGAGACATAGTGGTCCCAAGTTGTACTTGCCGCCGCAACCCTCGCTCGACTCAATTGGGAACCCCGTGGCATATTGTGGCGCCGGTAGGACACTCCCGTTGTCATTACACCTGGTTAGATAAACCGATTAAACCAAGTTTCCACGCGCTGAGCGACTGAACCGGTGCGGCTACGGTTATCAGCTGCCTGTAACTCTAACTCCGGTCACTTGAGCTCTATATCGCGCCTTGAACCAAGGGATCAAATCGGTTAGATAGCGAGGACGTCTGAAGTGACAGCTGACGTGATAGTCTGGTGCCACCGACCTATGTGTCGGCCTCTGATGGCGTGTGACCCCGTCCCATAGGTAATACAGGTCCGCTGCGGATGCAACGGTCCACAAACTGTATGGTGTAATCGTGCACTACAAGGCCTGGAAGCGCAAATGCTGGGACTGGGCTTAAGTCTAGTCCTACAGAACGAGGCTCGGGCTGCCTTAACGGGCACAAGTATGAAGCCACAGAAATATTTCATTGCAATATGTGCTGTGCGATTTATCGTATATAGAATCTGTGGCCTTCCATCACCGTTTTTGCAACCGCGAGGGCCGCAGTATTTGAGACAACATACGATTAATCCAGTGTAGGCCTTGATAGAGAGGAGAAAGGTAGACCGGGT"
max_score, alignment1, alignment2 = sequence_alignment(sequence1, sequence2)
print( max_score)

print(alignment1)
print(alignment2)




# In[ ]:




