{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "58e7989d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16, 13, 12, 8, 9, 42, 11, 23, 7, 24, 20, 26, 21, 6, 5, 4, 3, 39, 17, 1, 34, 41, 2, 0, 31, 43, 32, 18, 44, 10, 30, 40, 25, 15, 19, 37, 22, 28, 29, 38, 33, 27, 45, 46, 14, 35\n"
     ]
    }
   ],
   "source": [
    "from collections import defaultdict\n",
    "# Define a function to perform topological ordering of nodes in a directed graph.\n",
    "def topological_ordering(adj_list):\n",
    "    # Create an empty set to store all unique nodes in the graph.\n",
    "    nodes = set()\n",
    "    # Initialize dictionaries to track in-degrees and out-degrees of nodes.\n",
    "    in_degree = defaultdict(int)\n",
    "    out_degree = defaultdict(int)\n",
    "    # Create a dictionary to represent the adjacency list of the graph.\n",
    "    adjacency = defaultdict(list)\n",
    "\n",
    "    # Parse the adjacency list and extract nodes and edges.\n",
    "    for line in adj_list:\n",
    "        node_from, neighbors_str = line.split(\" -> \")\n",
    "        node_from = int(node_from)\n",
    "        neighbors = list(map(int, neighbors_str.split(\",\")))\n",
    "        nodes.add(node_from)\n",
    "        for node_to in neighbors:\n",
    "            nodes.add(node_to)\n",
    "            in_degree[node_to] += 1  # Increment in-degree of 'node_to'.\n",
    "            out_degree[node_from] += 1  # Increment out-degree of 'node_from'.\n",
    "            adjacency[node_from].append(node_to)  # Add the edge to the adjacency list.\n",
    "\n",
    "    # Find nodes with no incoming edges (i.e., in-degree = 0) as the starting nodes for sorting.\n",
    "    start_nodes = [node for node in nodes if in_degree[node] == 0]\n",
    "\n",
    "    # Function to perform topological sorting using depth-first search.\n",
    "    def topological_sort():\n",
    "        visited = []  # List to store visited nodes in topological order.\n",
    "        stack = start_nodes.copy()  # Initialize stack with starting nodes.\n",
    "\n",
    "        while stack:\n",
    "            current_node = stack.pop()\n",
    "            visited.append(current_node)\n",
    "\n",
    "            # Reduce the in-degree of each neighbor and add them to the stack if their in-degree becomes 0.\n",
    "            for neighbor in adjacency[current_node]:\n",
    "                in_degree[neighbor] -= 1\n",
    "                if in_degree[neighbor] == 0:\n",
    "                    stack.append(neighbor)\n",
    "\n",
    "        return visited\n",
    "\n",
    "    # Perform topological sorting.\n",
    "    topological_order = topological_sort()\n",
    "\n",
    "    # Combine the result into the desired format as a comma-separated string.\n",
    "    result = \", \".join(map(str, topological_order))\n",
    "\n",
    "    return result\n",
    "\n",
    "# Entry point for the program.\n",
    "if __name__ == \"__main__\":\n",
    "    # Example input in the given format.\n",
    "    adj_list = [\n",
    "        \n",
    "    \n",
    "  \n",
    "        \"0 -> 10,18,31,45,46\",\n",
    "        \"1 -> 2,29,34\",\n",
    "        \"10 -> 14,15,19,25,30\",\n",
    "        \"11 -> 38\",\n",
    "        \"12 -> 25,46\",\n",
    "        \"13 -> 23,29,46\",\n",
    "        \"14 -> 35\",\n",
    "        \"15 -> 19,27,38\",\n",
    "        \"16 -> 17,24,28,37\",\n",
    "        \"17 -> 31\",\n",
    "        \"18 -> 22,44\",\n",
    "        \"19 -> 22,33,37,38\",\n",
    "        \"2 -> 18,31,37,40\",\n",
    "        \"20 -> 21,22,26,30\",\n",
    "        \"21 -> 38,45\",\n",
    "        \"22 -> 27,28\",\n",
    "        \"23 -> 33\",\n",
    "        \"25 -> 33\",\n",
    "        \"26 -> 37\",\n",
    "        \"27 -> 45\",\n",
    "        \"28 -> 29\",\n",
    "        \"29 -> 33,38\",\n",
    "        \"3 -> 17,33,34,39\",\n",
    "        \"30 -> 40\",\n",
    "        \"31 -> 32,43\",\n",
    "        \"32 -> 46\",\n",
    "        \"34 -> 41\",\n",
    "        \"39 -> 40\",\n",
    "        \"4 -> 14,18,32,41,45\",\n",
    "        \"41 -> 43\",\n",
    "        \"44 -> 45,46\",\n",
    "        \"45 -> 46\",\n",
    "        \"5 -> 28,29,30,41\",\n",
    "        \"6 -> 27,33,35\",\n",
    "        \"7 -> 20,24,32,33\",\n",
    "        \"8 -> 23,9\",\n",
    "        \"9 -> 11,29,30,32,40,42\"\n",
    "\n",
    "\n",
    "    ]\n",
    "\n",
    "    # Call the topological_ordering function to get the topological ordering.\n",
    "    topological_order = topological_ordering(adj_list)\n",
    "\n",
    "    # Print the topological ordering.\n",
    "    print(topological_order)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "12849a74",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8ee6a393",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
